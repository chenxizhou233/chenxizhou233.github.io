{"meta":{"version":1,"warehouse":"4.0.0"},"models":{"Asset":[{"_id":"themes/fluid/source/css/gitalk.css","path":"css/gitalk.css","modified":1,"renderable":1},{"_id":"themes/fluid/source/css/main.styl","path":"css/main.styl","modified":1,"renderable":1},{"_id":"themes/fluid/source/img/avatar.png","path":"img/avatar.png","modified":1,"renderable":1},{"_id":"themes/fluid/source/img/default.png","path":"img/default.png","modified":1,"renderable":1},{"_id":"themes/fluid/source/img/favicon.png","path":"img/favicon.png","modified":1,"renderable":1},{"_id":"themes/fluid/source/img/loading.gif","path":"img/loading.gif","modified":1,"renderable":1},{"_id":"themes/fluid/source/img/police_beian.png","path":"img/police_beian.png","modified":1,"renderable":1},{"_id":"themes/fluid/source/js/boot.js","path":"js/boot.js","modified":1,"renderable":1},{"_id":"themes/fluid/source/js/color-schema.js","path":"js/color-schema.js","modified":1,"renderable":1},{"_id":"themes/fluid/source/js/events.js","path":"js/events.js","modified":1,"renderable":1},{"_id":"themes/fluid/source/js/img-lazyload.js","path":"js/img-lazyload.js","modified":1,"renderable":1},{"_id":"themes/fluid/source/js/leancloud.js","path":"js/leancloud.js","modified":1,"renderable":1},{"_id":"themes/fluid/source/js/local-search.js","path":"js/local-search.js","modified":1,"renderable":1},{"_id":"themes/fluid/source/js/plugins.js","path":"js/plugins.js","modified":1,"renderable":1},{"_id":"themes/fluid/source/js/utils.js","path":"js/utils.js","modified":1,"renderable":1},{"_id":"themes/fluid/source/xml/local-search.xml","path":"xml/local-search.xml","modified":1,"renderable":1},{"_id":"themes/fluid/source/lib/hint/hint.min.css","path":"lib/hint/hint.min.css","modified":1,"renderable":1},{"_id":"source/img/bg/bg.jpg","path":"img/bg/bg.jpg","modified":1,"renderable":0}],"Cache":[{"_id":"source/_posts/2021-8-7模拟赛总结.md","hash":"c89703efb11fb568da2cb32b373edf72ca6b16e3","modified":1628335746804},{"_id":"source/_posts/CF1492D.md","hash":"2fc1aad86662ce5cb3f02403b23af6462423207a","modified":1628334544559},{"_id":"source/_posts/Morris遍历.md","hash":"2c5cbc284ef940b381e6565fa50c55bd072601f6","modified":1628330380959},{"_id":"source/_posts/TODO.md","hash":"49917ba914525a6e50cf9a8e847301bf7a8a4d93","modified":1628336164725},{"_id":"source/_posts/斯坦纳树学习笔记.md","hash":"13357c7e4ae2eefd05b8434c5605dd8f35e217ec","modified":1628349134297},{"_id":"source/about/index.md","hash":"83893d0d07673cacac090347b009a147847c59b1","modified":1628344775353},{"_id":"source/_posts/斯坦纳树学习笔记/steiner-tree1.png","hash":"26dd7b8c1a03e396a656269b90c1bc6dc029d40a","modified":1628345720541},{"_id":"source/_posts/2021-8-7模拟赛总结/T1.png","hash":"07b349b09f5b6d3ef1a604eb2d08159292c409ce","modified":1628334781096},{"_id":"source/_posts/2021-8-7模拟赛总结/T3.png","hash":"1ce02b6a42142370b6e2449f5c4098fa9d39f1e5","modified":1628335081341},{"_id":"source/_posts/Morris遍历/20200216151818405.png","hash":"79770f38ce6ca70fef3214877c4b1bd04cb9fb83","modified":1628329729203},{"_id":"source/_posts/2021-8-7模拟赛总结/T2.png","hash":"411f51dab85ace0776fdaf0c0f384060c81e6cd5","modified":1628335033950},{"_id":"source/_posts/2021-8-7模拟赛总结/T4.png","hash":"114c2a1accbde3df60f8922c8194f166a9bfed52","modified":1628335702327},{"_id":"themes/fluid/source/css/_pages/_category/category.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1621768400000},{"_id":"themes/fluid/source/css/_pages/_tag/tag.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1621768400000},{"_id":"themes/fluid/.editorconfig","hash":"33218fbd623feb43edf5f99f15965392cecc44a6","modified":1621768400000},{"_id":"themes/fluid/.eslintrc","hash":"4bc2b19ce2b8c4d242f97d4ccf2d741e68ab0097","modified":1621768400000},{"_id":"themes/fluid/.gitattributes","hash":"a54f902957d49356376b59287b894b1a3d7a003f","modified":1621768400000},{"_id":"themes/fluid/.gitignore","hash":"bd095eee271360a38772ee1a42d4f000fb722e5f","modified":1621768400000},{"_id":"themes/fluid/LICENSE","hash":"df5b54be535593d5442cebafbea34eb9bd69b987","modified":1621768400000},{"_id":"themes/fluid/README.md","hash":"523b9db3801ca892124502c17d72864457cc4b21","modified":1621768400000},{"_id":"themes/fluid/README_en.md","hash":"ca8fd19a4948de1f253616a62c0e8a7d81f692f5","modified":1621768400000},{"_id":"themes/fluid/_config.yml","hash":"c604f39f9c643159d277bc60f5d8dc105b27ccc4","modified":1628348841898},{"_id":"themes/fluid/gulpfile.js","hash":"a7c87a83becf7080bddd14e81a6f09ce8c3df109","modified":1621768400000},{"_id":"themes/fluid/package.json","hash":"45b68110fcaf5819452f45ecd77282f97d1386f5","modified":1621768400000},{"_id":"themes/fluid/languages/de.yml","hash":"13a6a799415fc2f6f69ebd1a399fb44426a5d641","modified":1621768400000},{"_id":"themes/fluid/languages/en.yml","hash":"a85dcc5cc21f9cab50df31e5001b8818ee62d1e2","modified":1621768400000},{"_id":"themes/fluid/languages/eo.yml","hash":"a0c7984495d4f2d33b64adfa33adebbf768a5ac3","modified":1621768400000},{"_id":"themes/fluid/languages/zh-CN.yml","hash":"21307b4137c3d9b04bb58243747e75af0abc5a71","modified":1621768400000},{"_id":"themes/fluid/languages/ja.yml","hash":"91020031a847c0361a6fd7ab990c7be4bf17529b","modified":1621768400000},{"_id":"themes/fluid/languages/zh-TW.yml","hash":"1a6d415446da11dee5c5f400e7d67544fbe743ea","modified":1621768400000},{"_id":"themes/fluid/layout/404.ejs","hash":"689d9f4efd2a7f5edfd9b24561a7ade69d46617c","modified":1621768400000},{"_id":"themes/fluid/layout/about.ejs","hash":"ad6fed7b646d3ca961db83db0fbe020e3a5d42ad","modified":1621768400000},{"_id":"themes/fluid/layout/archive.ejs","hash":"472d0813ca5b88000a7bc6039f33b7e27b5a3216","modified":1621768400000},{"_id":"themes/fluid/layout/categories.ejs","hash":"6cbd88a2ef9dd2198d72ccc1899c4966ac5f49f9","modified":1621768400000},{"_id":"themes/fluid/layout/category.ejs","hash":"58291dfec65c36889dfce0ddc603540b67e4c598","modified":1621768400000},{"_id":"themes/fluid/layout/index.ejs","hash":"a154785aef120988d29409847977f24069d3a3d5","modified":1621768400000},{"_id":"themes/fluid/layout/layout.ejs","hash":"9d6ff8772bf54d7458ae4e846e5a2d1f2921b8a7","modified":1621768400000},{"_id":"themes/fluid/layout/links.ejs","hash":"19c6db0ccebc8f59fa4ef9567a066b33223eccd6","modified":1621768400000},{"_id":"themes/fluid/layout/page.ejs","hash":"1014b901d396f4fc445cb1ffc938d5380d894d71","modified":1621768400000},{"_id":"themes/fluid/layout/post.ejs","hash":"79e3679a7069351a6172c281b9d09f59d7580484","modified":1621768400000},{"_id":"themes/fluid/layout/tag.ejs","hash":"0ad89eb7c92a822980fa9a85285e6d94ad845d1d","modified":1621768400000},{"_id":"themes/fluid/layout/tags.ejs","hash":"1d06af34b6cf1d8a20d2eb565e309326ceba309f","modified":1621768400000},{"_id":"themes/fluid/.github/ISSUE_TEMPLATE/bug_report.md","hash":"16d33eb89ecf90f4046720fde5395d972c7ba1fd","modified":1621768400000},{"_id":"themes/fluid/.github/ISSUE_TEMPLATE/bug_report_zh.md","hash":"af977ed0792508bb0766ea8afe82d34ef1e8fb3c","modified":1621768400000},{"_id":"themes/fluid/.github/ISSUE_TEMPLATE/feature_request.md","hash":"c134dd57ffd269b93402ccfffe7dbe0f0b583bec","modified":1621768400000},{"_id":"themes/fluid/.github/ISSUE_TEMPLATE/feature_request_zh.md","hash":"ed08574b196447376dd74411cca664ac9227a5d4","modified":1621768400000},{"_id":"themes/fluid/.github/ISSUE_TEMPLATE/question.md","hash":"ab5eab9e3ff889c4ba7fd82846e7f5b7ae15bebc","modified":1621768400000},{"_id":"themes/fluid/.github/ISSUE_TEMPLATE/question_zh.md","hash":"e24b470f7aa8044499a4f5e39634e5dc43899011","modified":1621768400000},{"_id":"themes/fluid/.github/workflows/limit.yaml","hash":"f8bd2edeb4424ee7a055b31583445d5d5dff91a4","modified":1621768400000},{"_id":"themes/fluid/.github/workflows/lint.yaml","hash":"64d521c9c5b61d3a4852c74894fb574082dc7009","modified":1621768400000},{"_id":"themes/fluid/layout/_partial/archive-list.ejs","hash":"8723aa57f61134a2c1dc84cc7ea88ea366f4fda3","modified":1621768400000},{"_id":"themes/fluid/layout/_partial/beian.ejs","hash":"6ec30a9dd56341590af07f4227324f619025c109","modified":1621768400000},{"_id":"themes/fluid/layout/_partial/css.ejs","hash":"cdcb607f1104543a42beda647f3c9cf0f3d11623","modified":1621768400000},{"_id":"themes/fluid/layout/_partial/footer.ejs","hash":"39e63b3e1502803c9e8ea0c44ea662a7bbe15744","modified":1621768400000},{"_id":"themes/fluid/layout/_partial/head.ejs","hash":"248ecd01aead6e07ac1904a7b7c45395a922bcc7","modified":1621768400000},{"_id":"themes/fluid/layout/_partial/nav.ejs","hash":"245f49aad0e4124b52aa82d981281ad9c871f1f8","modified":1621768400000},{"_id":"themes/fluid/layout/_partial/paginator.ejs","hash":"0f38a2c238169edcb63fc46c23bfc529ff3859b7","modified":1621768400000},{"_id":"themes/fluid/layout/_partial/scripts.ejs","hash":"b3d93135d9ae74f006da31ec54343308bbd77cb5","modified":1621768400000},{"_id":"themes/fluid/layout/_partial/post-meta.ejs","hash":"3e0fa1731b6e54dbcf52ccf8e200e83dc4549bfa","modified":1621768400000},{"_id":"themes/fluid/layout/_partial/search.ejs","hash":"cdd7919fa01f6ef7ccc09938d662ff3d77f5d999","modified":1621768400000},{"_id":"themes/fluid/layout/_partial/statistics.ejs","hash":"920bc618d357d48d2b96f8758f6ae8f9488fc4d8","modified":1621768400000},{"_id":"themes/fluid/layout/_partial/toc.ejs","hash":"3d2fb5552f373e5a0c56bc356702d807bcbcb411","modified":1621768400000},{"_id":"themes/fluid/scripts/events/index.js","hash":"44faef3e77ab08b91e4c5c6f1cd9087a9faff443","modified":1621768400000},{"_id":"themes/fluid/scripts/filters/locals.js","hash":"58d0fec976f6b1d35e7ea03edc45414088acf05c","modified":1621768400000},{"_id":"themes/fluid/scripts/filters/post-filter.js","hash":"6c37e9f1ac1d6d00b3c32794e02e244dba942cd9","modified":1621768400000},{"_id":"themes/fluid/scripts/generators/local-search.js","hash":"fc2c50405b771b06b7f6cfc4e9de97b992691555","modified":1621768400000},{"_id":"themes/fluid/scripts/generators/pages.js","hash":"d9971f15fbb6b775e3d31a1b9b45011959395010","modified":1621768400000},{"_id":"themes/fluid/scripts/helpers/export-config.js","hash":"606131cb807846bf43776a9073fcc1473d359ec9","modified":1621768400000},{"_id":"themes/fluid/scripts/helpers/page.js","hash":"4607607445233b3029ef20ed5e91de0da0a7f9c5","modified":1621768400000},{"_id":"themes/fluid/scripts/helpers/utils.js","hash":"9045f47c7a71aab39f16cffb3e3847b752c2e0f1","modified":1621768400000},{"_id":"themes/fluid/scripts/helpers/url.js","hash":"99ab4551dc9c035abcc3bf4da5def2f63449d7ec","modified":1621768400000},{"_id":"themes/fluid/scripts/helpers/wordcount.js","hash":"e58d422eddb44c1be893f65f79f4c7feecfe6d5f","modified":1621768400000},{"_id":"themes/fluid/scripts/tags/button.js","hash":"3eb43a8cdea0a64576ad6b31b4df6c2bf5698d4c","modified":1621768400000},{"_id":"themes/fluid/scripts/tags/checkbox.js","hash":"63468f7875c09d9557fe8315afc97175745d9087","modified":1621768400000},{"_id":"themes/fluid/scripts/tags/group-image.js","hash":"4aeebb797026f1df25646a5d69f7fde79b1bcd26","modified":1621768400000},{"_id":"themes/fluid/scripts/tags/label.js","hash":"f05a6d32cca79535b22907dc03edb9d3fa2d8176","modified":1621768400000},{"_id":"themes/fluid/scripts/tags/mermaid.js","hash":"75160561e1ef3603b6d2ad2938464ab1cb77fd38","modified":1621768400000},{"_id":"themes/fluid/scripts/tags/note.js","hash":"f52f3a005b41f48b4da274ac64710177c8d4502f","modified":1621768400000},{"_id":"themes/fluid/scripts/utils/join-path.js","hash":"629e7deb3955f750c1cfa6fc773f412e020fcef4","modified":1621768400000},{"_id":"themes/fluid/scripts/utils/object.js","hash":"649457796374c79e49a19bd541e4ad8e78fe8995","modified":1621768400000},{"_id":"themes/fluid/source/css/gitalk.css","hash":"a57b3cc8e04a0a4a27aefa07facf5b5e7bca0e76","modified":1621768400000},{"_id":"themes/fluid/source/css/main.styl","hash":"d5a8a59c8d1fd17d699a951e59c4ce9ae44c419d","modified":1621768400000},{"_id":"themes/fluid/source/img/avatar.png","hash":"fe739a158cc128f70f780eb5fa96f388b81d478f","modified":1621768400000},{"_id":"themes/fluid/source/img/default.png","hash":"7bb2b8ee07db305bcadee2985b81b942027ae940","modified":1621768400000},{"_id":"themes/fluid/source/img/favicon.png","hash":"64b215db2cb3af98fe639e94537cb5209f959c78","modified":1621768400000},{"_id":"themes/fluid/source/img/loading.gif","hash":"2d2fc0f947940f98c21afafef39ecf226a2e8d55","modified":1621768400000},{"_id":"themes/fluid/source/img/police_beian.png","hash":"90efded6baa2dde599a9d6b1387973e8e64923ea","modified":1621768400000},{"_id":"themes/fluid/source/js/boot.js","hash":"3de344ee619da989f6dccf7c2ae459fe91075983","modified":1621768400000},{"_id":"themes/fluid/source/js/color-schema.js","hash":"cc712fc71bf33d561e1ba74fe1d52d2353092171","modified":1621768400000},{"_id":"themes/fluid/source/js/img-lazyload.js","hash":"cbdeca434ec4da51f488c821d51b4d23c73294af","modified":1621768400000},{"_id":"themes/fluid/source/js/events.js","hash":"4b9d2676c9544db9cc40a8c7d18456792299ba86","modified":1621768400000},{"_id":"themes/fluid/source/js/leancloud.js","hash":"b7985ac3cff9ee2722db43ee6b32b5484c43f5f2","modified":1621768400000},{"_id":"themes/fluid/source/js/local-search.js","hash":"bf00f5786bb8de7241f635455b67243d26656222","modified":1621768400000},{"_id":"themes/fluid/source/js/plugins.js","hash":"342b1fbc30d1465687ce389a4e07f967266d5d86","modified":1621768400000},{"_id":"themes/fluid/source/js/utils.js","hash":"9d492fab9c26311ad0ab553c890e09b9575a76f2","modified":1621768400000},{"_id":"themes/fluid/source/xml/local-search.xml","hash":"8c96ba6a064705602ce28d096fd7dd9069630a55","modified":1621768400000},{"_id":"themes/fluid/layout/_partial/comments/changyan.ejs","hash":"725a1fe23c672fca87edc57739b748c3adf705da","modified":1621768400000},{"_id":"themes/fluid/layout/_partial/comments/cusdis.ejs","hash":"5f9dc012be27040bbe874d0c093c0d53958cc987","modified":1621768400000},{"_id":"themes/fluid/layout/_partial/comments/disqus.ejs","hash":"fb4502fc9204284f8b4e8dabde8477d478e826e5","modified":1621768400000},{"_id":"themes/fluid/layout/_partial/comments/gitalk.ejs","hash":"843bc141a4545eb20d1c92fb63c85d459b4271ec","modified":1621768400000},{"_id":"themes/fluid/layout/_partial/comments/livere.ejs","hash":"2264758fed57542a7389c7aa9f00f1aefa17eb87","modified":1621768400000},{"_id":"themes/fluid/layout/_partial/comments/remark42.ejs","hash":"d4e9532feeb02aed61bd15eda536b5b631454dac","modified":1621768400000},{"_id":"themes/fluid/layout/_partial/comments/twikoo.ejs","hash":"ffe08e76c9ebd4fc27715b8a60f385b3f10d0348","modified":1621768400000},{"_id":"themes/fluid/layout/_partial/comments/utterances.ejs","hash":"e1ed6530dfd7310f91060a75766a93ac3c39be3a","modified":1621768400000},{"_id":"themes/fluid/layout/_partial/comments/waline.ejs","hash":"5b61661fbc65752f54f99402077dbb03044149a1","modified":1621768400000},{"_id":"themes/fluid/layout/_partial/comments/valine.ejs","hash":"9238063c5e2928bb6fce2b99cd25ad85e78c4d1c","modified":1621768400000},{"_id":"themes/fluid/layout/_partial/plugins/analytics.ejs","hash":"557077a8825fffc0a2c7fe2b29f319287950244f","modified":1621768400000},{"_id":"themes/fluid/layout/_partial/plugins/math.ejs","hash":"76c4e0608ae362a265ac5e9c0fc49f75c1bc568e","modified":1621768400000},{"_id":"themes/fluid/layout/_partial/plugins/mermaid.ejs","hash":"10ed1f9a611449d37736e17c4e251127b38b3772","modified":1621768400000},{"_id":"themes/fluid/layout/_partial/plugins/nprogress.ejs","hash":"4c2d39ce816b8a6dcd6b53113c8695f8bd650a23","modified":1621768400000},{"_id":"themes/fluid/layout/_partial/plugins/typed.ejs","hash":"ab71df2e56b60e8e193ff827e81704e5b358a977","modified":1621768400000},{"_id":"themes/fluid/scripts/events/lib/compatible-configs.js","hash":"b5fd5a2d9c463eb59318af0f47c591c485b6ad27","modified":1621768400000},{"_id":"themes/fluid/scripts/events/lib/footnote.js","hash":"3b2abc5f5e3b681874637e98e047dc4969eb1983","modified":1621768400000},{"_id":"themes/fluid/scripts/events/lib/hello.js","hash":"28e186c32576eb3d5d923273471a001c47fe8071","modified":1621768400000},{"_id":"themes/fluid/scripts/events/lib/highlight.js","hash":"deed966f38cf0c8dee3f72e5b1f2e878510db0e1","modified":1621768400000},{"_id":"themes/fluid/scripts/events/lib/lazyload.js","hash":"a2d08e3b9f98b6371b2e64d664f079c99571494b","modified":1621768400000},{"_id":"themes/fluid/scripts/events/lib/merge-configs.js","hash":"c1db1a4f9eca6e36b660530641e3a4fb6a30c8d8","modified":1621768400000},{"_id":"themes/fluid/source/css/_functions/base.styl","hash":"2e46f3f4e2c9fe34c1ff1c598738fc7349ae8188","modified":1621768400000},{"_id":"themes/fluid/source/css/_mixins/base.styl","hash":"542e306ee9494e8a78e44d6d7d409605d94caeb3","modified":1621768400000},{"_id":"themes/fluid/source/css/_pages/pages.styl","hash":"b8e887bc7fb3b765a1f8ec9448eff8603a41984f","modified":1621768400000},{"_id":"themes/fluid/source/css/_variables/base.styl","hash":"26d29403d8ecb0b533e63bde3ca73b2c91f171ff","modified":1621768400000},{"_id":"themes/fluid/source/lib/hint/hint.min.css","hash":"b38df228460ebfb4c0b6085336ee2878fe85aafe","modified":1621768400000},{"_id":"themes/fluid/source/css/_pages/_about/about.styl","hash":"15d2786d00418e61022475194ad76445d68e27ea","modified":1621768400000},{"_id":"themes/fluid/source/css/_pages/_archive/archive.styl","hash":"6e6f22b664199772370b59ce1678b0c148b5849f","modified":1621768400000},{"_id":"themes/fluid/source/css/_pages/_base/base.styl","hash":"dabd87267d60240c0daea0f35a46f30ee1b2337a","modified":1621768400000},{"_id":"themes/fluid/source/css/_pages/_base/color-schema.styl","hash":"32fb938d72b2d86159cb315a98b086bd17fa4415","modified":1621768400000},{"_id":"themes/fluid/source/css/_pages/_base/inline.styl","hash":"d547ab0b91f84eb0acd0bc0c5d716ce17c30361a","modified":1621768400000},{"_id":"themes/fluid/source/css/_pages/_base/keyframes.styl","hash":"94065ea50f5bef7566d184f2422f6ac20866ba22","modified":1621768400000},{"_id":"themes/fluid/source/css/_pages/_base/rewrite.styl","hash":"4c6fffc6d4a3b8830931800ee7da99dccf1be36e","modified":1621768400000},{"_id":"themes/fluid/source/css/_pages/_index/index.styl","hash":"ad7dcc8a060d94d3c44ca5e0788a24ca38be0f79","modified":1621768400000},{"_id":"themes/fluid/source/css/_pages/_category/categories.styl","hash":"1ab7db37c2f7dc7ccdb994dcb41c16a4c8920397","modified":1621768400000},{"_id":"themes/fluid/source/css/_pages/_links/links.styl","hash":"cd4ebb1426abed9fda93b797b02c6d5dd71dc2a1","modified":1621768400000},{"_id":"themes/fluid/source/css/_pages/_post/post.styl","hash":"3a6b4f8a29648d9d2c1e99b52a7b42df3f15cf62","modified":1621768400000},{"_id":"themes/fluid/source/css/_pages/_post/tag_plugin.styl","hash":"766fcf017deb4c8b0c260ac4c8d2e3489407ad89","modified":1621768400000},{"_id":"themes/fluid/source/css/_pages/_tag/tags.styl","hash":"65bfc01c76abc927fa1a23bf2422892b0d566c3f","modified":1621768400000},{"_id":"themes/fluid/source/css/_pages/_base/_widget/banner.styl","hash":"30f8fab95a5214d79df0ccc02b937df8bd885676","modified":1621768400000},{"_id":"themes/fluid/source/css/_pages/_base/_widget/board.styl","hash":"32d90bcc8bf2fd5d8d78e86a567973d4b69bcfa1","modified":1621768400000},{"_id":"themes/fluid/source/css/_pages/_base/_widget/copy-btn.styl","hash":"9f932ca3f9625c13aa5353f58319881e62c0c653","modified":1621768400000},{"_id":"themes/fluid/source/css/_pages/_base/_widget/footer.styl","hash":"35539a1ce8476e75515015a06d01ec66e4af6834","modified":1621768400000},{"_id":"themes/fluid/source/css/_pages/_base/_widget/footnote.styl","hash":"ae9289cc89649af2042907f8a003303b987f3404","modified":1621768400000},{"_id":"themes/fluid/source/css/_pages/_base/_widget/header.styl","hash":"d8011325756eb6e4ce619b3e7b4d6d80c2de8a57","modified":1621768400000},{"_id":"themes/fluid/source/css/_pages/_base/_widget/qrcode.styl","hash":"461d609a802a4f9aa9f492411ed8074813a956b7","modified":1621768400000},{"_id":"themes/fluid/source/css/_pages/_base/_widget/scroll-btn.styl","hash":"55e10a6965462f8f62f85e75fd5e143af02a4b44","modified":1621768400000},{"_id":"themes/fluid/source/css/_pages/_base/_widget/search.styl","hash":"10f7e91a91e681fb9fe46f9df7707b9ef78707c8","modified":1621768400000},{"_id":"source/img/bg/bg.jpg","hash":"78eb6b9d44241ca3fb29afba813f136e32eb2388","modified":1585705038371},{"_id":"public/local-search.xml","hash":"50cd084b6875d58db4e7a79efcc021170f13eed9","modified":1628349155345},{"_id":"public/about/index.html","hash":"87e243f2a111dcb26d234d7d331b44f8c7e9a25c","modified":1628349155345},{"_id":"public/2021/08/07/斯坦纳树学习笔记/index.html","hash":"81cee353d99a90321ac9abb3bc1d03e37e2d9d99","modified":1628349155345},{"_id":"public/2021/08/07/TODO/index.html","hash":"6503bdcbdac4ca0913592f9fb6c329e3c22a8019","modified":1628349155345},{"_id":"public/2021/08/07/2021-8-7模拟赛总结/index.html","hash":"fefea6cfda8b1bdc7c92515d875a3b93f8584d4b","modified":1628349155345},{"_id":"public/categories/C/index.html","hash":"c2984c04c9bf5b5c975f0a25269a11d452839efe","modified":1628349155345},{"_id":"public/index.html","hash":"23287aa6a25d656c30ca2ae0af0a61906d7ff563","modified":1628349155345},{"_id":"public/tags/赛后总结/index.html","hash":"20aef43e11ba9c50bda051744ee41fa7b9533787","modified":1628349155345},{"_id":"public/tags/计划清单/index.html","hash":"59e790a9ef116fa070c733603c2e22901a85144b","modified":1628349155345},{"_id":"public/tags/图论/index.html","hash":"b459a160e5a91d8f55bf7fc9254828e60c7ee420","modified":1628349155345},{"_id":"public/archives/index.html","hash":"499d1c38c1848107996b696f3b743f19242a6842","modified":1628349155345},{"_id":"public/archives/2021/index.html","hash":"499d1c38c1848107996b696f3b743f19242a6842","modified":1628349155345},{"_id":"public/archives/2021/08/index.html","hash":"499d1c38c1848107996b696f3b743f19242a6842","modified":1628349155345},{"_id":"public/404.html","hash":"2d4aa88d1842c8611500d75295ec8f29e7239768","modified":1628349155345},{"_id":"public/tags/index.html","hash":"c56469d78aae4a55e8f27268b1e80cb743fe2b0c","modified":1628349155345},{"_id":"public/categories/index.html","hash":"a9e0de545bc22072d49b51e4e9bf7c614b2db73f","modified":1628349155345},{"_id":"public/links/index.html","hash":"fa6e184091ab23d84d1e2c3743e35ee4929b7645","modified":1628349155345},{"_id":"public/2021/08/07/CF1492D/index.html","hash":"e6d6ac919cb5d30c4e230aac800d178add78d8bd","modified":1628349155345},{"_id":"public/2021/08/07/Morris遍历/index.html","hash":"0f15dda5fed040e4901637bad126d52e0bb2c028","modified":1628349155345},{"_id":"public/img/avatar.png","hash":"fe739a158cc128f70f780eb5fa96f388b81d478f","modified":1628349155345},{"_id":"public/img/default.png","hash":"7bb2b8ee07db305bcadee2985b81b942027ae940","modified":1628349155345},{"_id":"public/img/favicon.png","hash":"64b215db2cb3af98fe639e94537cb5209f959c78","modified":1628349155345},{"_id":"public/img/loading.gif","hash":"2d2fc0f947940f98c21afafef39ecf226a2e8d55","modified":1628349155345},{"_id":"public/img/police_beian.png","hash":"90efded6baa2dde599a9d6b1387973e8e64923ea","modified":1628349155345},{"_id":"public/xml/local-search.xml","hash":"8c96ba6a064705602ce28d096fd7dd9069630a55","modified":1628349155345},{"_id":"public/2021/08/07/斯坦纳树学习笔记/steiner-tree1.png","hash":"26dd7b8c1a03e396a656269b90c1bc6dc029d40a","modified":1628349155345},{"_id":"public/2021/08/07/2021-8-7模拟赛总结/T1.png","hash":"07b349b09f5b6d3ef1a604eb2d08159292c409ce","modified":1628349155345},{"_id":"public/2021/08/07/2021-8-7模拟赛总结/T3.png","hash":"1ce02b6a42142370b6e2449f5c4098fa9d39f1e5","modified":1628349155345},{"_id":"public/2021/08/07/Morris遍历/20200216151818405.png","hash":"79770f38ce6ca70fef3214877c4b1bd04cb9fb83","modified":1628349155345},{"_id":"public/2021/08/07/2021-8-7模拟赛总结/T2.png","hash":"411f51dab85ace0776fdaf0c0f384060c81e6cd5","modified":1628349155345},{"_id":"public/2021/08/07/2021-8-7模拟赛总结/T4.png","hash":"114c2a1accbde3df60f8922c8194f166a9bfed52","modified":1628349155345},{"_id":"public/css/gitalk.css","hash":"a57b3cc8e04a0a4a27aefa07facf5b5e7bca0e76","modified":1628349155345},{"_id":"public/js/boot.js","hash":"3de344ee619da989f6dccf7c2ae459fe91075983","modified":1628349155345},{"_id":"public/js/color-schema.js","hash":"cc712fc71bf33d561e1ba74fe1d52d2353092171","modified":1628349155345},{"_id":"public/js/events.js","hash":"4b9d2676c9544db9cc40a8c7d18456792299ba86","modified":1628349155345},{"_id":"public/js/img-lazyload.js","hash":"cbdeca434ec4da51f488c821d51b4d23c73294af","modified":1628349155345},{"_id":"public/js/local-search.js","hash":"bf00f5786bb8de7241f635455b67243d26656222","modified":1628349155345},{"_id":"public/js/leancloud.js","hash":"b7985ac3cff9ee2722db43ee6b32b5484c43f5f2","modified":1628349155345},{"_id":"public/js/plugins.js","hash":"342b1fbc30d1465687ce389a4e07f967266d5d86","modified":1628349155345},{"_id":"public/js/utils.js","hash":"9d492fab9c26311ad0ab553c890e09b9575a76f2","modified":1628349155345},{"_id":"public/lib/hint/hint.min.css","hash":"b38df228460ebfb4c0b6085336ee2878fe85aafe","modified":1628349155345},{"_id":"public/css/main.css","hash":"be9a0652de06d61fa26f4b4128b29bcc5a4a0ad7","modified":1628349155345},{"_id":"public/img/bg/bg.jpg","hash":"78eb6b9d44241ca3fb29afba813f136e32eb2388","modified":1628349155345}],"Category":[{"name":"C++","_id":"cks1x1mdx000av4vv66sa5bl8"}],"Data":[],"Page":[{"title":"about","date":"2021-08-07T07:57:38.000Z","layout":"about","_content":"\n这里是一只蒟蒻的小博客\n","source":"about/index.md","raw":"---\ntitle: about\ndate: 2021-08-07 15:57:38\nlayout: about\n---\n\n这里是一只蒟蒻的小博客\n","updated":"2021-08-07T13:59:35.353Z","path":"about/index.html","comments":1,"_id":"cks1x1mdg0000v4vvbt468shu","content":"<p>这里是一只蒟蒻的小博客</p>\n","site":{"data":{}},"excerpt":"","more":"<p>这里是一只蒟蒻的小博客</p>\n"}],"Post":[{"title":"2021.8.7模拟赛总结","date":"2021-08-07T11:10:08.000Z","_content":"\n### T1 序列\n![T1](T1.png)  \n构造一棵平衡树，使其支持反转与查询排名的操作。\n本蒟蒻的做法为使用FHQ-Treap并将 $key$ 换为当前节点的高度,便可通过此题  \n\n###  T2 跨年晚会  \n![T2](T2.png)  \n贪心  \n\n### T3 数星星  \n![T3](T3.png)  \n容斥原理，今后要多做些这样的题  \n\n### T4 修复长城  \n![T4](T4.png)  \n这应该算一道斯坦纳树的板子题，日后应该会写笔记  \n","source":"_posts/2021-8-7模拟赛总结.md","raw":"---\ntitle: 2021.8.7模拟赛总结\ndate: 2021-08-07 19:10:08\ntags: 赛后总结\n---\n\n### T1 序列\n![T1](T1.png)  \n构造一棵平衡树，使其支持反转与查询排名的操作。\n本蒟蒻的做法为使用FHQ-Treap并将 $key$ 换为当前节点的高度,便可通过此题  \n\n###  T2 跨年晚会  \n![T2](T2.png)  \n贪心  \n\n### T3 数星星  \n![T3](T3.png)  \n容斥原理，今后要多做些这样的题  \n\n### T4 修复长城  \n![T4](T4.png)  \n这应该算一道斯坦纳树的板子题，日后应该会写笔记  \n","slug":"2021-8-7模拟赛总结","published":1,"updated":"2021-08-07T11:29:06.804Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cks1x1mdj0001v4vv4pt6dbqs","content":"<h3 id=\"T1-序列\"><a href=\"#T1-序列\" class=\"headerlink\" title=\"T1 序列\"></a>T1 序列</h3><p><img src=\"T1.png\" alt=\"T1\"><br>构造一棵平衡树，使其支持反转与查询排名的操作。<br>本蒟蒻的做法为使用FHQ-Treap并将 $key$ 换为当前节点的高度,便可通过此题  </p>\n<h3 id=\"T2-跨年晚会\"><a href=\"#T2-跨年晚会\" class=\"headerlink\" title=\"T2 跨年晚会\"></a>T2 跨年晚会</h3><p><img src=\"T2.png\" alt=\"T2\"><br>贪心  </p>\n<h3 id=\"T3-数星星\"><a href=\"#T3-数星星\" class=\"headerlink\" title=\"T3 数星星\"></a>T3 数星星</h3><p><img src=\"T3.png\" alt=\"T3\"><br>容斥原理，今后要多做些这样的题  </p>\n<h3 id=\"T4-修复长城\"><a href=\"#T4-修复长城\" class=\"headerlink\" title=\"T4 修复长城\"></a>T4 修复长城</h3><p><img src=\"T4.png\" alt=\"T4\"><br>这应该算一道斯坦纳树的板子题，日后应该会写笔记  </p>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"T1-序列\"><a href=\"#T1-序列\" class=\"headerlink\" title=\"T1 序列\"></a>T1 序列</h3><p><img src=\"T1.png\" alt=\"T1\"><br>构造一棵平衡树，使其支持反转与查询排名的操作。<br>本蒟蒻的做法为使用FHQ-Treap并将 $key$ 换为当前节点的高度,便可通过此题  </p>\n<h3 id=\"T2-跨年晚会\"><a href=\"#T2-跨年晚会\" class=\"headerlink\" title=\"T2 跨年晚会\"></a>T2 跨年晚会</h3><p><img src=\"T2.png\" alt=\"T2\"><br>贪心  </p>\n<h3 id=\"T3-数星星\"><a href=\"#T3-数星星\" class=\"headerlink\" title=\"T3 数星星\"></a>T3 数星星</h3><p><img src=\"T3.png\" alt=\"T3\"><br>容斥原理，今后要多做些这样的题  </p>\n<h3 id=\"T4-修复长城\"><a href=\"#T4-修复长城\" class=\"headerlink\" title=\"T4 修复长城\"></a>T4 修复长城</h3><p><img src=\"T4.png\" alt=\"T4\"><br>这应该算一道斯坦纳树的板子题，日后应该会写笔记  </p>\n"},{"title":"CF1492D","date":"2021-08-07T10:03:39.000Z","_content":"\n### 题目描述\n给定三个数 $a,b,k$ 要求构造出两个数 $x,y$ ( $x>y$ )使:  \n1: $x$ 与 $y$ 的二进制表达中有 $a$ 个 $0$ ， $b$ 个 $1$    \n2: $x-y$ 的结果的二进制表达中有 $k$ 个 $1$   \n**$x,y$ 的二进制表示中不能有前导零**  \n### 输入格式\n三个整数 $a,b,k$ ; \n### 输出格式  \n第一行输出\"Yes\"或\"No\"  \n若有解，输出两行二进制数表示一种可能的 $x$ 与 $y$ 的组合  \n\n***\n\n显然，这是一道构造题  \n观察样例我们可以发现，形如:   \n> $1...1000...0$  \n> $1...0001...0$  \n\n的数，在相减后必定会产生**中间的$0$的个数**个$1$ 。  \n但样例中没有给出 $a<k$ 且成立的情况  \n所以我们还要考虑中间的 $0$ 不够 $k$ 个的情况。  \n再次观察上面的例子，发现中间的 $0$ 只做**占位**作用，只要那一位的二进制数相减为 $0$ ,就是合法的构造。因此只需在构造时在中间部分补 $1$ 就行了。  \n因为题目要求**结果中不能有前导零**，所以还要注意特判一下出现前导零的情况。  \n我的代码有较多特判与不优美的输出方式，但逻辑较为清晰，大家可酌情查看。\n***\n```cpp  \n#include<iostream>\n#include<cstdio>\n#include<cstdlib>\n \nusing namespace std;\n \nint a, b, k;\nint tmp1, tmp2;\n \nint main()\n{\n    scanf(\"%d%d%d\", &a, &b, &k);\n    //若结果里没有1，那至少原数要有1个1\n    if (k == 0 && b != 0)\n    {\n        printf(\"Yes\\n\");\n        for (int i = 1; i <= b; i++)\n            putchar('1');\n        for (int i = 1; i <= a; i++)\n            putchar('0');\n        putchar('\\n');\n        for (int i = 1; i <= b; i++)\n            putchar('1');\n        for (int i = 1; i <= a; i++)\n            putchar('0');\n    }\n    //a+b-2<k其实等价于判断a+b<=k+1\n    //如k！=0且只有1个1，那么因为不能有前导零，\n    //所以像\"100\",\"001\"就是错误的构造\n    else if (a + b - 2 < k || k != 0 && b == 1 )\n    {\n        printf(\"No\");\n        return 0;\n    }\n    //结果有1，但x,y中无0,显然不行\n    else if (k && !a)\n    {\n        printf(\"No\");\n        return 0;\n    }\n \t//0够不够，分情况讨论\n    else if (a >= k)\n    {\n        printf(\"Yes\\n\");\n        for (int i = 1; i <= b - 1; i++)\n            putchar('1');\n        for (int i = 1; i <= a - k; i++)\n            putchar('0');\n        putchar('1');\n        for (int i = 1; i <= k; i++)\n            putchar('0');\n        putchar('\\n');\n        for (int i = 1; i <= b - 1; i++)\n            putchar('1');\n        for (int i = 1; i <= a - k; i++)\n            putchar('0');\n \n        for (int i = 1; i <= k; i++)\n            putchar('0');\n        putchar('1');\n    }\n    else\n    {\n        printf(\"Yes\\n\");\n        for (int i = 1; i <= a + b - k - 1; i++)\n            putchar('1');\n        putchar('1');\n        for (int i = 1; i <= k - a; i++)\n            putchar('1');\n        for (int i = 1; i <= a; i++)\n            putchar('0');\n        putchar('\\n');\n        for (int i = 1; i <= a + b - k - 1; i++)\n            putchar('1');\n        putchar('0');\n        for (int i = 1; i <= k - a; i++)\n            putchar('1');\n        for (int i = 1; i <= a - 1; i++)\n            putchar('0');\n        putchar('1');\n    }\n    return 0;\n}\n```\n","source":"_posts/CF1492D.md","raw":"---\ntitle: CF1492D\ndate: 2021-08-07 18:03:39\ntags:\n---\n\n### 题目描述\n给定三个数 $a,b,k$ 要求构造出两个数 $x,y$ ( $x>y$ )使:  \n1: $x$ 与 $y$ 的二进制表达中有 $a$ 个 $0$ ， $b$ 个 $1$    \n2: $x-y$ 的结果的二进制表达中有 $k$ 个 $1$   \n**$x,y$ 的二进制表示中不能有前导零**  \n### 输入格式\n三个整数 $a,b,k$ ; \n### 输出格式  \n第一行输出\"Yes\"或\"No\"  \n若有解，输出两行二进制数表示一种可能的 $x$ 与 $y$ 的组合  \n\n***\n\n显然，这是一道构造题  \n观察样例我们可以发现，形如:   \n> $1...1000...0$  \n> $1...0001...0$  \n\n的数，在相减后必定会产生**中间的$0$的个数**个$1$ 。  \n但样例中没有给出 $a<k$ 且成立的情况  \n所以我们还要考虑中间的 $0$ 不够 $k$ 个的情况。  \n再次观察上面的例子，发现中间的 $0$ 只做**占位**作用，只要那一位的二进制数相减为 $0$ ,就是合法的构造。因此只需在构造时在中间部分补 $1$ 就行了。  \n因为题目要求**结果中不能有前导零**，所以还要注意特判一下出现前导零的情况。  \n我的代码有较多特判与不优美的输出方式，但逻辑较为清晰，大家可酌情查看。\n***\n```cpp  \n#include<iostream>\n#include<cstdio>\n#include<cstdlib>\n \nusing namespace std;\n \nint a, b, k;\nint tmp1, tmp2;\n \nint main()\n{\n    scanf(\"%d%d%d\", &a, &b, &k);\n    //若结果里没有1，那至少原数要有1个1\n    if (k == 0 && b != 0)\n    {\n        printf(\"Yes\\n\");\n        for (int i = 1; i <= b; i++)\n            putchar('1');\n        for (int i = 1; i <= a; i++)\n            putchar('0');\n        putchar('\\n');\n        for (int i = 1; i <= b; i++)\n            putchar('1');\n        for (int i = 1; i <= a; i++)\n            putchar('0');\n    }\n    //a+b-2<k其实等价于判断a+b<=k+1\n    //如k！=0且只有1个1，那么因为不能有前导零，\n    //所以像\"100\",\"001\"就是错误的构造\n    else if (a + b - 2 < k || k != 0 && b == 1 )\n    {\n        printf(\"No\");\n        return 0;\n    }\n    //结果有1，但x,y中无0,显然不行\n    else if (k && !a)\n    {\n        printf(\"No\");\n        return 0;\n    }\n \t//0够不够，分情况讨论\n    else if (a >= k)\n    {\n        printf(\"Yes\\n\");\n        for (int i = 1; i <= b - 1; i++)\n            putchar('1');\n        for (int i = 1; i <= a - k; i++)\n            putchar('0');\n        putchar('1');\n        for (int i = 1; i <= k; i++)\n            putchar('0');\n        putchar('\\n');\n        for (int i = 1; i <= b - 1; i++)\n            putchar('1');\n        for (int i = 1; i <= a - k; i++)\n            putchar('0');\n \n        for (int i = 1; i <= k; i++)\n            putchar('0');\n        putchar('1');\n    }\n    else\n    {\n        printf(\"Yes\\n\");\n        for (int i = 1; i <= a + b - k - 1; i++)\n            putchar('1');\n        putchar('1');\n        for (int i = 1; i <= k - a; i++)\n            putchar('1');\n        for (int i = 1; i <= a; i++)\n            putchar('0');\n        putchar('\\n');\n        for (int i = 1; i <= a + b - k - 1; i++)\n            putchar('1');\n        putchar('0');\n        for (int i = 1; i <= k - a; i++)\n            putchar('1');\n        for (int i = 1; i <= a - 1; i++)\n            putchar('0');\n        putchar('1');\n    }\n    return 0;\n}\n```\n","slug":"CF1492D","published":1,"updated":"2021-08-07T11:09:04.559Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cks1x1mdn0002v4vv68bgex37","content":"<h3 id=\"题目描述\"><a href=\"#题目描述\" class=\"headerlink\" title=\"题目描述\"></a>题目描述</h3><p>给定三个数 $a,b,k$ 要求构造出两个数 $x,y$ ( $x&gt;y$ )使:<br>1: $x$ 与 $y$ 的二进制表达中有 $a$ 个 $0$ ， $b$ 个 $1$<br>2: $x-y$ 的结果的二进制表达中有 $k$ 个 $1$<br><strong>$x,y$ 的二进制表示中不能有前导零</strong>  </p>\n<h3 id=\"输入格式\"><a href=\"#输入格式\" class=\"headerlink\" title=\"输入格式\"></a>输入格式</h3><p>三个整数 $a,b,k$ ; </p>\n<h3 id=\"输出格式\"><a href=\"#输出格式\" class=\"headerlink\" title=\"输出格式\"></a>输出格式</h3><p>第一行输出”Yes”或”No”<br>若有解，输出两行二进制数表示一种可能的 $x$ 与 $y$ 的组合  </p>\n<hr>\n<p>显然，这是一道构造题<br>观察样例我们可以发现，形如:   </p>\n<blockquote>\n<p>$1…1000…0$<br>$1…0001…0$  </p>\n</blockquote>\n<p>的数，在相减后必定会产生<strong>中间的$0$的个数</strong>个$1$ 。<br>但样例中没有给出 $a&lt;k$ 且成立的情况<br>所以我们还要考虑中间的 $0$ 不够 $k$ 个的情况。<br>再次观察上面的例子，发现中间的 $0$ 只做<strong>占位</strong>作用，只要那一位的二进制数相减为 $0$ ,就是合法的构造。因此只需在构造时在中间部分补 $1$ 就行了。<br>因为题目要求<strong>结果中不能有前导零</strong>，所以还要注意特判一下出现前导零的情况。<br>我的代码有较多特判与不优美的输出方式，但逻辑较为清晰，大家可酌情查看。</p>\n<hr>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs cpp\"><span class=\"hljs-meta\">#<span class=\"hljs-meta-keyword\">include</span><span class=\"hljs-meta-string\">&lt;iostream&gt;</span></span><br><span class=\"hljs-meta\">#<span class=\"hljs-meta-keyword\">include</span><span class=\"hljs-meta-string\">&lt;cstdio&gt;</span></span><br><span class=\"hljs-meta\">#<span class=\"hljs-meta-keyword\">include</span><span class=\"hljs-meta-string\">&lt;cstdlib&gt;</span></span><br> <br><span class=\"hljs-keyword\">using</span> <span class=\"hljs-keyword\">namespace</span> std;<br> <br><span class=\"hljs-keyword\">int</span> a, b, k;<br><span class=\"hljs-keyword\">int</span> tmp1, tmp2;<br> <br><span class=\"hljs-function\"><span class=\"hljs-keyword\">int</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span></span><br><span class=\"hljs-function\"></span>&#123;<br>    <span class=\"hljs-built_in\">scanf</span>(<span class=\"hljs-string\">&quot;%d%d%d&quot;</span>, &amp;a, &amp;b, &amp;k);<br>    <span class=\"hljs-comment\">//若结果里没有1，那至少原数要有1个1</span><br>    <span class=\"hljs-keyword\">if</span> (k == <span class=\"hljs-number\">0</span> &amp;&amp; b != <span class=\"hljs-number\">0</span>)<br>    &#123;<br>        <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;Yes\\n&quot;</span>);<br>        <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">int</span> i = <span class=\"hljs-number\">1</span>; i &lt;= b; i++)<br>            <span class=\"hljs-built_in\">putchar</span>(<span class=\"hljs-string\">&#x27;1&#x27;</span>);<br>        <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">int</span> i = <span class=\"hljs-number\">1</span>; i &lt;= a; i++)<br>            <span class=\"hljs-built_in\">putchar</span>(<span class=\"hljs-string\">&#x27;0&#x27;</span>);<br>        <span class=\"hljs-built_in\">putchar</span>(<span class=\"hljs-string\">&#x27;\\n&#x27;</span>);<br>        <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">int</span> i = <span class=\"hljs-number\">1</span>; i &lt;= b; i++)<br>            <span class=\"hljs-built_in\">putchar</span>(<span class=\"hljs-string\">&#x27;1&#x27;</span>);<br>        <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">int</span> i = <span class=\"hljs-number\">1</span>; i &lt;= a; i++)<br>            <span class=\"hljs-built_in\">putchar</span>(<span class=\"hljs-string\">&#x27;0&#x27;</span>);<br>    &#125;<br>    <span class=\"hljs-comment\">//a+b-2&lt;k其实等价于判断a+b&lt;=k+1</span><br>    <span class=\"hljs-comment\">//如k！=0且只有1个1，那么因为不能有前导零，</span><br>    <span class=\"hljs-comment\">//所以像&quot;100&quot;,&quot;001&quot;就是错误的构造</span><br>    <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span> (a + b - <span class=\"hljs-number\">2</span> &lt; k || k != <span class=\"hljs-number\">0</span> &amp;&amp; b == <span class=\"hljs-number\">1</span> )<br>    &#123;<br>        <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;No&quot;</span>);<br>        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;<br>    &#125;<br>    <span class=\"hljs-comment\">//结果有1，但x,y中无0,显然不行</span><br>    <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span> (k &amp;&amp; !a)<br>    &#123;<br>        <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;No&quot;</span>);<br>        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;<br>    &#125;<br> \t<span class=\"hljs-comment\">//0够不够，分情况讨论</span><br>    <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span> (a &gt;= k)<br>    &#123;<br>        <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;Yes\\n&quot;</span>);<br>        <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">int</span> i = <span class=\"hljs-number\">1</span>; i &lt;= b - <span class=\"hljs-number\">1</span>; i++)<br>            <span class=\"hljs-built_in\">putchar</span>(<span class=\"hljs-string\">&#x27;1&#x27;</span>);<br>        <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">int</span> i = <span class=\"hljs-number\">1</span>; i &lt;= a - k; i++)<br>            <span class=\"hljs-built_in\">putchar</span>(<span class=\"hljs-string\">&#x27;0&#x27;</span>);<br>        <span class=\"hljs-built_in\">putchar</span>(<span class=\"hljs-string\">&#x27;1&#x27;</span>);<br>        <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">int</span> i = <span class=\"hljs-number\">1</span>; i &lt;= k; i++)<br>            <span class=\"hljs-built_in\">putchar</span>(<span class=\"hljs-string\">&#x27;0&#x27;</span>);<br>        <span class=\"hljs-built_in\">putchar</span>(<span class=\"hljs-string\">&#x27;\\n&#x27;</span>);<br>        <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">int</span> i = <span class=\"hljs-number\">1</span>; i &lt;= b - <span class=\"hljs-number\">1</span>; i++)<br>            <span class=\"hljs-built_in\">putchar</span>(<span class=\"hljs-string\">&#x27;1&#x27;</span>);<br>        <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">int</span> i = <span class=\"hljs-number\">1</span>; i &lt;= a - k; i++)<br>            <span class=\"hljs-built_in\">putchar</span>(<span class=\"hljs-string\">&#x27;0&#x27;</span>);<br> <br>        <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">int</span> i = <span class=\"hljs-number\">1</span>; i &lt;= k; i++)<br>            <span class=\"hljs-built_in\">putchar</span>(<span class=\"hljs-string\">&#x27;0&#x27;</span>);<br>        <span class=\"hljs-built_in\">putchar</span>(<span class=\"hljs-string\">&#x27;1&#x27;</span>);<br>    &#125;<br>    <span class=\"hljs-keyword\">else</span><br>    &#123;<br>        <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;Yes\\n&quot;</span>);<br>        <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">int</span> i = <span class=\"hljs-number\">1</span>; i &lt;= a + b - k - <span class=\"hljs-number\">1</span>; i++)<br>            <span class=\"hljs-built_in\">putchar</span>(<span class=\"hljs-string\">&#x27;1&#x27;</span>);<br>        <span class=\"hljs-built_in\">putchar</span>(<span class=\"hljs-string\">&#x27;1&#x27;</span>);<br>        <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">int</span> i = <span class=\"hljs-number\">1</span>; i &lt;= k - a; i++)<br>            <span class=\"hljs-built_in\">putchar</span>(<span class=\"hljs-string\">&#x27;1&#x27;</span>);<br>        <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">int</span> i = <span class=\"hljs-number\">1</span>; i &lt;= a; i++)<br>            <span class=\"hljs-built_in\">putchar</span>(<span class=\"hljs-string\">&#x27;0&#x27;</span>);<br>        <span class=\"hljs-built_in\">putchar</span>(<span class=\"hljs-string\">&#x27;\\n&#x27;</span>);<br>        <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">int</span> i = <span class=\"hljs-number\">1</span>; i &lt;= a + b - k - <span class=\"hljs-number\">1</span>; i++)<br>            <span class=\"hljs-built_in\">putchar</span>(<span class=\"hljs-string\">&#x27;1&#x27;</span>);<br>        <span class=\"hljs-built_in\">putchar</span>(<span class=\"hljs-string\">&#x27;0&#x27;</span>);<br>        <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">int</span> i = <span class=\"hljs-number\">1</span>; i &lt;= k - a; i++)<br>            <span class=\"hljs-built_in\">putchar</span>(<span class=\"hljs-string\">&#x27;1&#x27;</span>);<br>        <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">int</span> i = <span class=\"hljs-number\">1</span>; i &lt;= a - <span class=\"hljs-number\">1</span>; i++)<br>            <span class=\"hljs-built_in\">putchar</span>(<span class=\"hljs-string\">&#x27;0&#x27;</span>);<br>        <span class=\"hljs-built_in\">putchar</span>(<span class=\"hljs-string\">&#x27;1&#x27;</span>);<br>    &#125;<br>    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"题目描述\"><a href=\"#题目描述\" class=\"headerlink\" title=\"题目描述\"></a>题目描述</h3><p>给定三个数 $a,b,k$ 要求构造出两个数 $x,y$ ( $x&gt;y$ )使:<br>1: $x$ 与 $y$ 的二进制表达中有 $a$ 个 $0$ ， $b$ 个 $1$<br>2: $x-y$ 的结果的二进制表达中有 $k$ 个 $1$<br><strong>$x,y$ 的二进制表示中不能有前导零</strong>  </p>\n<h3 id=\"输入格式\"><a href=\"#输入格式\" class=\"headerlink\" title=\"输入格式\"></a>输入格式</h3><p>三个整数 $a,b,k$ ; </p>\n<h3 id=\"输出格式\"><a href=\"#输出格式\" class=\"headerlink\" title=\"输出格式\"></a>输出格式</h3><p>第一行输出”Yes”或”No”<br>若有解，输出两行二进制数表示一种可能的 $x$ 与 $y$ 的组合  </p>\n<hr>\n<p>显然，这是一道构造题<br>观察样例我们可以发现，形如:   </p>\n<blockquote>\n<p>$1…1000…0$<br>$1…0001…0$  </p>\n</blockquote>\n<p>的数，在相减后必定会产生<strong>中间的$0$的个数</strong>个$1$ 。<br>但样例中没有给出 $a&lt;k$ 且成立的情况<br>所以我们还要考虑中间的 $0$ 不够 $k$ 个的情况。<br>再次观察上面的例子，发现中间的 $0$ 只做<strong>占位</strong>作用，只要那一位的二进制数相减为 $0$ ,就是合法的构造。因此只需在构造时在中间部分补 $1$ 就行了。<br>因为题目要求<strong>结果中不能有前导零</strong>，所以还要注意特判一下出现前导零的情况。<br>我的代码有较多特判与不优美的输出方式，但逻辑较为清晰，大家可酌情查看。</p>\n<hr>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs cpp\"><span class=\"hljs-meta\">#<span class=\"hljs-meta-keyword\">include</span><span class=\"hljs-meta-string\">&lt;iostream&gt;</span></span><br><span class=\"hljs-meta\">#<span class=\"hljs-meta-keyword\">include</span><span class=\"hljs-meta-string\">&lt;cstdio&gt;</span></span><br><span class=\"hljs-meta\">#<span class=\"hljs-meta-keyword\">include</span><span class=\"hljs-meta-string\">&lt;cstdlib&gt;</span></span><br> <br><span class=\"hljs-keyword\">using</span> <span class=\"hljs-keyword\">namespace</span> std;<br> <br><span class=\"hljs-keyword\">int</span> a, b, k;<br><span class=\"hljs-keyword\">int</span> tmp1, tmp2;<br> <br><span class=\"hljs-function\"><span class=\"hljs-keyword\">int</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span></span><br><span class=\"hljs-function\"></span>&#123;<br>    <span class=\"hljs-built_in\">scanf</span>(<span class=\"hljs-string\">&quot;%d%d%d&quot;</span>, &amp;a, &amp;b, &amp;k);<br>    <span class=\"hljs-comment\">//若结果里没有1，那至少原数要有1个1</span><br>    <span class=\"hljs-keyword\">if</span> (k == <span class=\"hljs-number\">0</span> &amp;&amp; b != <span class=\"hljs-number\">0</span>)<br>    &#123;<br>        <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;Yes\\n&quot;</span>);<br>        <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">int</span> i = <span class=\"hljs-number\">1</span>; i &lt;= b; i++)<br>            <span class=\"hljs-built_in\">putchar</span>(<span class=\"hljs-string\">&#x27;1&#x27;</span>);<br>        <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">int</span> i = <span class=\"hljs-number\">1</span>; i &lt;= a; i++)<br>            <span class=\"hljs-built_in\">putchar</span>(<span class=\"hljs-string\">&#x27;0&#x27;</span>);<br>        <span class=\"hljs-built_in\">putchar</span>(<span class=\"hljs-string\">&#x27;\\n&#x27;</span>);<br>        <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">int</span> i = <span class=\"hljs-number\">1</span>; i &lt;= b; i++)<br>            <span class=\"hljs-built_in\">putchar</span>(<span class=\"hljs-string\">&#x27;1&#x27;</span>);<br>        <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">int</span> i = <span class=\"hljs-number\">1</span>; i &lt;= a; i++)<br>            <span class=\"hljs-built_in\">putchar</span>(<span class=\"hljs-string\">&#x27;0&#x27;</span>);<br>    &#125;<br>    <span class=\"hljs-comment\">//a+b-2&lt;k其实等价于判断a+b&lt;=k+1</span><br>    <span class=\"hljs-comment\">//如k！=0且只有1个1，那么因为不能有前导零，</span><br>    <span class=\"hljs-comment\">//所以像&quot;100&quot;,&quot;001&quot;就是错误的构造</span><br>    <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span> (a + b - <span class=\"hljs-number\">2</span> &lt; k || k != <span class=\"hljs-number\">0</span> &amp;&amp; b == <span class=\"hljs-number\">1</span> )<br>    &#123;<br>        <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;No&quot;</span>);<br>        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;<br>    &#125;<br>    <span class=\"hljs-comment\">//结果有1，但x,y中无0,显然不行</span><br>    <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span> (k &amp;&amp; !a)<br>    &#123;<br>        <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;No&quot;</span>);<br>        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;<br>    &#125;<br> \t<span class=\"hljs-comment\">//0够不够，分情况讨论</span><br>    <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span> (a &gt;= k)<br>    &#123;<br>        <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;Yes\\n&quot;</span>);<br>        <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">int</span> i = <span class=\"hljs-number\">1</span>; i &lt;= b - <span class=\"hljs-number\">1</span>; i++)<br>            <span class=\"hljs-built_in\">putchar</span>(<span class=\"hljs-string\">&#x27;1&#x27;</span>);<br>        <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">int</span> i = <span class=\"hljs-number\">1</span>; i &lt;= a - k; i++)<br>            <span class=\"hljs-built_in\">putchar</span>(<span class=\"hljs-string\">&#x27;0&#x27;</span>);<br>        <span class=\"hljs-built_in\">putchar</span>(<span class=\"hljs-string\">&#x27;1&#x27;</span>);<br>        <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">int</span> i = <span class=\"hljs-number\">1</span>; i &lt;= k; i++)<br>            <span class=\"hljs-built_in\">putchar</span>(<span class=\"hljs-string\">&#x27;0&#x27;</span>);<br>        <span class=\"hljs-built_in\">putchar</span>(<span class=\"hljs-string\">&#x27;\\n&#x27;</span>);<br>        <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">int</span> i = <span class=\"hljs-number\">1</span>; i &lt;= b - <span class=\"hljs-number\">1</span>; i++)<br>            <span class=\"hljs-built_in\">putchar</span>(<span class=\"hljs-string\">&#x27;1&#x27;</span>);<br>        <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">int</span> i = <span class=\"hljs-number\">1</span>; i &lt;= a - k; i++)<br>            <span class=\"hljs-built_in\">putchar</span>(<span class=\"hljs-string\">&#x27;0&#x27;</span>);<br> <br>        <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">int</span> i = <span class=\"hljs-number\">1</span>; i &lt;= k; i++)<br>            <span class=\"hljs-built_in\">putchar</span>(<span class=\"hljs-string\">&#x27;0&#x27;</span>);<br>        <span class=\"hljs-built_in\">putchar</span>(<span class=\"hljs-string\">&#x27;1&#x27;</span>);<br>    &#125;<br>    <span class=\"hljs-keyword\">else</span><br>    &#123;<br>        <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;Yes\\n&quot;</span>);<br>        <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">int</span> i = <span class=\"hljs-number\">1</span>; i &lt;= a + b - k - <span class=\"hljs-number\">1</span>; i++)<br>            <span class=\"hljs-built_in\">putchar</span>(<span class=\"hljs-string\">&#x27;1&#x27;</span>);<br>        <span class=\"hljs-built_in\">putchar</span>(<span class=\"hljs-string\">&#x27;1&#x27;</span>);<br>        <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">int</span> i = <span class=\"hljs-number\">1</span>; i &lt;= k - a; i++)<br>            <span class=\"hljs-built_in\">putchar</span>(<span class=\"hljs-string\">&#x27;1&#x27;</span>);<br>        <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">int</span> i = <span class=\"hljs-number\">1</span>; i &lt;= a; i++)<br>            <span class=\"hljs-built_in\">putchar</span>(<span class=\"hljs-string\">&#x27;0&#x27;</span>);<br>        <span class=\"hljs-built_in\">putchar</span>(<span class=\"hljs-string\">&#x27;\\n&#x27;</span>);<br>        <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">int</span> i = <span class=\"hljs-number\">1</span>; i &lt;= a + b - k - <span class=\"hljs-number\">1</span>; i++)<br>            <span class=\"hljs-built_in\">putchar</span>(<span class=\"hljs-string\">&#x27;1&#x27;</span>);<br>        <span class=\"hljs-built_in\">putchar</span>(<span class=\"hljs-string\">&#x27;0&#x27;</span>);<br>        <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">int</span> i = <span class=\"hljs-number\">1</span>; i &lt;= k - a; i++)<br>            <span class=\"hljs-built_in\">putchar</span>(<span class=\"hljs-string\">&#x27;1&#x27;</span>);<br>        <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">int</span> i = <span class=\"hljs-number\">1</span>; i &lt;= a - <span class=\"hljs-number\">1</span>; i++)<br>            <span class=\"hljs-built_in\">putchar</span>(<span class=\"hljs-string\">&#x27;0&#x27;</span>);<br>        <span class=\"hljs-built_in\">putchar</span>(<span class=\"hljs-string\">&#x27;1&#x27;</span>);<br>    &#125;<br>    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>\n"},{"title":"TODO","date":"2021-08-07T11:31:49.000Z","sticky":100,"_content":"\n## Upd:2021-8-7:\n1.斯坦纳树\n2.文艺平衡树笔记\n3.KD-Tree  \n***\n","source":"_posts/TODO.md","raw":"---\ntitle: TODO\ndate: 2021-08-07 19:31:49\ntags: 计划清单  \nsticky: 100\n---\n\n## Upd:2021-8-7:\n1.斯坦纳树\n2.文艺平衡树笔记\n3.KD-Tree  \n***\n","slug":"TODO","published":1,"updated":"2021-08-07T11:36:04.725Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cks1x1mdr0004v4vv01plcbpk","content":"<h2 id=\"Upd-2021-8-7\"><a href=\"#Upd-2021-8-7\" class=\"headerlink\" title=\"Upd:2021-8-7:\"></a>Upd:2021-8-7:</h2><p>1.斯坦纳树<br>2.文艺平衡树笔记<br>3.KD-Tree  </p>\n<hr>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"Upd-2021-8-7\"><a href=\"#Upd-2021-8-7\" class=\"headerlink\" title=\"Upd:2021-8-7:\"></a>Upd:2021-8-7:</h2><p>1.斯坦纳树<br>2.文艺平衡树笔记<br>3.KD-Tree  </p>\n<hr>\n"},{"title":"Morris遍历","date":"2021-08-07T08:48:54.000Z","_content":"\n# Morris遍历， $O(1)$ 空间遍历二叉树  \n\n在我们的学习过程中，二叉树的前、中、后序遍历相信大家并不陌生了：dfs一下就行了。  \n但，在最坏情况下,整颗二叉数都会被存入栈空间中。  \n为了解决这种问题，我们便引入了一种新的遍历方式：Morris遍历  \n> 注意，这只是一种实现前、中、后序遍历的方式，并不是一种新的遍历规则   \n\n<!--more-->\n\n## 原理讲解：  \n在整个过程中，我们需要维护**当前节点的位置cur**与cur的**左子树中最右端的节点pre**，并利用一些节点的右儿子的**空余的指针**，使得我们能够建立一种机制，对于没有左子树的节点只到达一次，对于有左子树的节点会到达两次来保证 $O(1)$ 的空间复杂度的。下面我们通过伪代码来讲解这一过程  \n```cpp\ncur = root;//cur初始化为根结点\nwhile(cur!=null)\n{\n    if(cur.left==null) cur=cur.right;//如果左子树为空，将当前节点更新为右子树根结点\n    else\n    {\n        pre = getPre(cur.left);//找到cur左子树中最右边的节点  \n        if(pre.right==null)\n            pre.right = cur;\n            //注意，这里是Morris遍历的核心部分，它利用了空余的资源，将“存放根结点”的任务无需额外空间便完成了\n        else if(pre.right==cur)\n            pre.right = null;\n            //还原树结构（回溯）\n    }\n}\n``` \n\n我们可以发现，这个算法的核心就是利用**空闲的叶子节点的右指针**来减少空间复杂度的   \n下面我们通过一张图来解释一下这个过程：\n![简单的二叉树](20200216151818405.png)\n- 将根节点1设置为cur。\n- 因为cur（节点1）不为空，且cur（节点1）的左孩子节点2不为空，所以我们找到以节点2为根节点的左子树中最右端的节点5。\n- 节点5右孩子为空，此时我们输出cur（节点1）的值，然后将节点5右孩子指向为cur，即节点1。更新cur节点为cur左孩子，即节点2。\n- 因为cur（节点2）左孩子不为空，找到其左子树最右端节点4\n- 节点4右孩子为空，先输出cur（节点2）的值，再将节点4右孩子指向cur（节点2）,并更新cur（节点2）为其左孩子节点4。\n- 这个时候cur（节点4）的左孩子为空，所以访问其右孩子，发现右孩子指向了节点2，所以我们将cur更新为节点2。\n- 这个时候我们发现cur又指向了节点2，所以左孩子节点4不为空，我们再次找到左子树中最右端节点4，但是这个时候节点4的右孩子指向了cur，所以我们将其删除，即节点4右孩子指向为空，恢复原来的树结构。并且由于已经访问了左孩子和根节点，所以这个时候我们访问其右孩子节点5。\n- ……  \n## 代码实现\n### 前序\n```cpp\nvoid MorrisPreOrderTraverse(Node *root)\n{\n\tif (root == NULL)\n\t{\n\t\treturn;\n\t}\n \n\tNode *cur = root;\n\tNode *pre = NULL;\n \n\twhile (cur != NULL)\n\t{\n\t\tpre = cur->left;\n\t\tif (pre != NULL)\n\t\t{\n\t\t\twhile(pre->right != NULL && pre->right != cur)\n\t\t\t{\n\t\t\t\tpre = pre->right;\n\t\t\t}\n\t\t\tif (pre->right == NULL)\n\t\t\t{\n\t\t\t\tpre->right = cur;\t\t// 空闲指针\n\t\t\t\tcout<<cur->val<<\" \";\t// 打印结点值的顺序稍微调整\n\t\t\t\tcur = cur->left;\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tpre->right = NULL;\n\t\t\t}\n\t\t}\n\t\telse\n\t\t{\n\t\t\tcout<<cur->val<<\" \";\n\t\t}\n\t\tcur = cur->right;\n\t}\n}\n```\n### 中序  \n```cpp\nvoid MorrisInOrderTraverse(Node *root)\n{\n\tif (root == NULL)\n\t{\n\t\treturn;\n\t}\n \n\tNode *cur = root;\n\tNode *pre = NULL;\n \n\twhile (cur != NULL)\n\t{\n\t\tpre = cur->left;\n\t\tif (pre != NULL)\n\t\t{\n\t\t\twhile(pre->right != NULL && pre->right != cur)\n\t\t\t{\n\t\t\t\tpre = pre->right;\n\t\t\t}\n\t\t\tif (pre->right == NULL)\n\t\t\t{\n\t\t\t\tpre->right = cur;\t\t// 空闲指针\n\t\t\t\tcur = cur->left;\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tpre->right = NULL;\n\t\t\t}\n\t\t}\n\t\tcout<<cur->val<<\" \";\n\t\tcur = cur->right;\n\t}\n}\n```\n### 后序\n```cpp\nNode* reverseEdge(Node *root)\n{\n\tNode *pre = NULL;\n\tNode *next = NULL;\n \n\twhile(root != NULL)\n\t{\n\t\tnext = root->right;\n\t\troot->right = pre;\n\t\tpre = root;\n\t\troot = next;\n\t}\n \n\treturn pre;\n}\n \n// 逆序打印左子树右边界\nvoid printEdge(Node *root)\n{\n\tNode *lastNode = reverseEdge(root);\n\tNode *cur = lastNode;\n \n\twhile (cur != NULL)\n\t{\n\t\tcout<<cur->val<<\" \";\n\t\tcur = cur->right;\n\t}\n\treverseEdge(lastNode);\n}\n \n// Morris后序遍历 (左 -> 右 -> 根)\nvoid MorrisPostOrderTraverse(Node *root)\n{\n\tif (root == NULL)\n\t{\n\t\treturn;\n\t}\n \n\tNode *cur = root;\n\tNode *pre = NULL;\n \n\twhile (cur != NULL)\n\t{\n\t\tpre = cur->left;\n\t\tif (pre != NULL)\n\t\t{\n\t\t\twhile(pre->right != NULL && pre->right != cur)\n\t\t\t{\n\t\t\t\tpre = pre->right;\n\t\t\t}\n\t\t\tif (pre->right == NULL)\n\t\t\t{\n\t\t\t\tpre->right = cur;\t\t// 空闲指针\n\t\t\t\tcur = cur->left;\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tpre->right = NULL;\n\t\t\t\tprintEdge(cur->left);\n\t\t\t}\n\t\t}\n\t\tcur = cur->right;\n\t}\n\tprintEdge(root);\n}\n```\n\n## 参考资料  \n>感谢以下博客，为本文提供了资料  \n>1.[遍历的c++实现](https://leetcode-cn.com/problems/find-mode-in-binary-search-tree/solution/xiang-jie-cshi-xian-morriszhong-xu-bian-li-jie-fa-/)   \n>2. [图源侵删](https://blog.csdn.net/danmo_wuhen/article/details/104339630)  \n\n> 感谢以下博客，帮助我更好的理解。\n>1.[神级遍历——morris](https://zhuanlan.zhihu.com/p/101321696)\n>2.[Morris遍历](https://blog.csdn.net/weixin_42638946/article/details/118788173)\n","source":"_posts/Morris遍历.md","raw":"---\ntitle: Morris遍历\ndate: 2021-08-07 16:48:54\ntags: 图论  \ncategories: C++\n---\n\n# Morris遍历， $O(1)$ 空间遍历二叉树  \n\n在我们的学习过程中，二叉树的前、中、后序遍历相信大家并不陌生了：dfs一下就行了。  \n但，在最坏情况下,整颗二叉数都会被存入栈空间中。  \n为了解决这种问题，我们便引入了一种新的遍历方式：Morris遍历  \n> 注意，这只是一种实现前、中、后序遍历的方式，并不是一种新的遍历规则   \n\n<!--more-->\n\n## 原理讲解：  \n在整个过程中，我们需要维护**当前节点的位置cur**与cur的**左子树中最右端的节点pre**，并利用一些节点的右儿子的**空余的指针**，使得我们能够建立一种机制，对于没有左子树的节点只到达一次，对于有左子树的节点会到达两次来保证 $O(1)$ 的空间复杂度的。下面我们通过伪代码来讲解这一过程  \n```cpp\ncur = root;//cur初始化为根结点\nwhile(cur!=null)\n{\n    if(cur.left==null) cur=cur.right;//如果左子树为空，将当前节点更新为右子树根结点\n    else\n    {\n        pre = getPre(cur.left);//找到cur左子树中最右边的节点  \n        if(pre.right==null)\n            pre.right = cur;\n            //注意，这里是Morris遍历的核心部分，它利用了空余的资源，将“存放根结点”的任务无需额外空间便完成了\n        else if(pre.right==cur)\n            pre.right = null;\n            //还原树结构（回溯）\n    }\n}\n``` \n\n我们可以发现，这个算法的核心就是利用**空闲的叶子节点的右指针**来减少空间复杂度的   \n下面我们通过一张图来解释一下这个过程：\n![简单的二叉树](20200216151818405.png)\n- 将根节点1设置为cur。\n- 因为cur（节点1）不为空，且cur（节点1）的左孩子节点2不为空，所以我们找到以节点2为根节点的左子树中最右端的节点5。\n- 节点5右孩子为空，此时我们输出cur（节点1）的值，然后将节点5右孩子指向为cur，即节点1。更新cur节点为cur左孩子，即节点2。\n- 因为cur（节点2）左孩子不为空，找到其左子树最右端节点4\n- 节点4右孩子为空，先输出cur（节点2）的值，再将节点4右孩子指向cur（节点2）,并更新cur（节点2）为其左孩子节点4。\n- 这个时候cur（节点4）的左孩子为空，所以访问其右孩子，发现右孩子指向了节点2，所以我们将cur更新为节点2。\n- 这个时候我们发现cur又指向了节点2，所以左孩子节点4不为空，我们再次找到左子树中最右端节点4，但是这个时候节点4的右孩子指向了cur，所以我们将其删除，即节点4右孩子指向为空，恢复原来的树结构。并且由于已经访问了左孩子和根节点，所以这个时候我们访问其右孩子节点5。\n- ……  \n## 代码实现\n### 前序\n```cpp\nvoid MorrisPreOrderTraverse(Node *root)\n{\n\tif (root == NULL)\n\t{\n\t\treturn;\n\t}\n \n\tNode *cur = root;\n\tNode *pre = NULL;\n \n\twhile (cur != NULL)\n\t{\n\t\tpre = cur->left;\n\t\tif (pre != NULL)\n\t\t{\n\t\t\twhile(pre->right != NULL && pre->right != cur)\n\t\t\t{\n\t\t\t\tpre = pre->right;\n\t\t\t}\n\t\t\tif (pre->right == NULL)\n\t\t\t{\n\t\t\t\tpre->right = cur;\t\t// 空闲指针\n\t\t\t\tcout<<cur->val<<\" \";\t// 打印结点值的顺序稍微调整\n\t\t\t\tcur = cur->left;\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tpre->right = NULL;\n\t\t\t}\n\t\t}\n\t\telse\n\t\t{\n\t\t\tcout<<cur->val<<\" \";\n\t\t}\n\t\tcur = cur->right;\n\t}\n}\n```\n### 中序  \n```cpp\nvoid MorrisInOrderTraverse(Node *root)\n{\n\tif (root == NULL)\n\t{\n\t\treturn;\n\t}\n \n\tNode *cur = root;\n\tNode *pre = NULL;\n \n\twhile (cur != NULL)\n\t{\n\t\tpre = cur->left;\n\t\tif (pre != NULL)\n\t\t{\n\t\t\twhile(pre->right != NULL && pre->right != cur)\n\t\t\t{\n\t\t\t\tpre = pre->right;\n\t\t\t}\n\t\t\tif (pre->right == NULL)\n\t\t\t{\n\t\t\t\tpre->right = cur;\t\t// 空闲指针\n\t\t\t\tcur = cur->left;\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tpre->right = NULL;\n\t\t\t}\n\t\t}\n\t\tcout<<cur->val<<\" \";\n\t\tcur = cur->right;\n\t}\n}\n```\n### 后序\n```cpp\nNode* reverseEdge(Node *root)\n{\n\tNode *pre = NULL;\n\tNode *next = NULL;\n \n\twhile(root != NULL)\n\t{\n\t\tnext = root->right;\n\t\troot->right = pre;\n\t\tpre = root;\n\t\troot = next;\n\t}\n \n\treturn pre;\n}\n \n// 逆序打印左子树右边界\nvoid printEdge(Node *root)\n{\n\tNode *lastNode = reverseEdge(root);\n\tNode *cur = lastNode;\n \n\twhile (cur != NULL)\n\t{\n\t\tcout<<cur->val<<\" \";\n\t\tcur = cur->right;\n\t}\n\treverseEdge(lastNode);\n}\n \n// Morris后序遍历 (左 -> 右 -> 根)\nvoid MorrisPostOrderTraverse(Node *root)\n{\n\tif (root == NULL)\n\t{\n\t\treturn;\n\t}\n \n\tNode *cur = root;\n\tNode *pre = NULL;\n \n\twhile (cur != NULL)\n\t{\n\t\tpre = cur->left;\n\t\tif (pre != NULL)\n\t\t{\n\t\t\twhile(pre->right != NULL && pre->right != cur)\n\t\t\t{\n\t\t\t\tpre = pre->right;\n\t\t\t}\n\t\t\tif (pre->right == NULL)\n\t\t\t{\n\t\t\t\tpre->right = cur;\t\t// 空闲指针\n\t\t\t\tcur = cur->left;\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tpre->right = NULL;\n\t\t\t\tprintEdge(cur->left);\n\t\t\t}\n\t\t}\n\t\tcur = cur->right;\n\t}\n\tprintEdge(root);\n}\n```\n\n## 参考资料  \n>感谢以下博客，为本文提供了资料  \n>1.[遍历的c++实现](https://leetcode-cn.com/problems/find-mode-in-binary-search-tree/solution/xiang-jie-cshi-xian-morriszhong-xu-bian-li-jie-fa-/)   \n>2. [图源侵删](https://blog.csdn.net/danmo_wuhen/article/details/104339630)  \n\n> 感谢以下博客，帮助我更好的理解。\n>1.[神级遍历——morris](https://zhuanlan.zhihu.com/p/101321696)\n>2.[Morris遍历](https://blog.csdn.net/weixin_42638946/article/details/118788173)\n","slug":"Morris遍历","published":1,"updated":"2021-08-07T09:59:40.959Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cks1x1mdv0008v4vveihy35ob","content":"<h1 id=\"Morris遍历，-O-1-空间遍历二叉树\"><a href=\"#Morris遍历，-O-1-空间遍历二叉树\" class=\"headerlink\" title=\"Morris遍历， $O(1)$ 空间遍历二叉树\"></a>Morris遍历， $O(1)$ 空间遍历二叉树</h1><p>在我们的学习过程中，二叉树的前、中、后序遍历相信大家并不陌生了：dfs一下就行了。<br>但，在最坏情况下,整颗二叉数都会被存入栈空间中。<br>为了解决这种问题，我们便引入了一种新的遍历方式：Morris遍历  </p>\n<blockquote>\n<p>注意，这只是一种实现前、中、后序遍历的方式，并不是一种新的遍历规则   </p>\n</blockquote>\n<span id=\"more\"></span>\n<h2 id=\"原理讲解：\"><a href=\"#原理讲解：\" class=\"headerlink\" title=\"原理讲解：\"></a>原理讲解：</h2><p>在整个过程中，我们需要维护<strong>当前节点的位置cur</strong>与cur的<strong>左子树中最右端的节点pre</strong>，并利用一些节点的右儿子的<strong>空余的指针</strong>，使得我们能够建立一种机制，对于没有左子树的节点只到达一次，对于有左子树的节点会到达两次来保证 $O(1)$ 的空间复杂度的。下面我们通过伪代码来讲解这一过程<br><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs cpp\">cur = root;<span class=\"hljs-comment\">//cur初始化为根结点</span><br><span class=\"hljs-keyword\">while</span>(cur!=null)<br>&#123;<br>    <span class=\"hljs-keyword\">if</span>(cur.left==null) cur=cur.right;<span class=\"hljs-comment\">//如果左子树为空，将当前节点更新为右子树根结点</span><br>    <span class=\"hljs-keyword\">else</span><br>    &#123;<br>        pre = <span class=\"hljs-built_in\">getPre</span>(cur.left);<span class=\"hljs-comment\">//找到cur左子树中最右边的节点  </span><br>        <span class=\"hljs-keyword\">if</span>(pre.right==null)<br>            pre.right = cur;<br>            <span class=\"hljs-comment\">//注意，这里是Morris遍历的核心部分，它利用了空余的资源，将“存放根结点”的任务无需额外空间便完成了</span><br>        <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span>(pre.right==cur)<br>            pre.right = null;<br>            <span class=\"hljs-comment\">//还原树结构（回溯）</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></p>\n<p>我们可以发现，这个算法的核心就是利用<strong>空闲的叶子节点的右指针</strong>来减少空间复杂度的<br>下面我们通过一张图来解释一下这个过程：<br><img src=\"20200216151818405.png\" alt=\"简单的二叉树\"></p>\n<ul>\n<li>将根节点1设置为cur。</li>\n<li>因为cur（节点1）不为空，且cur（节点1）的左孩子节点2不为空，所以我们找到以节点2为根节点的左子树中最右端的节点5。</li>\n<li>节点5右孩子为空，此时我们输出cur（节点1）的值，然后将节点5右孩子指向为cur，即节点1。更新cur节点为cur左孩子，即节点2。</li>\n<li>因为cur（节点2）左孩子不为空，找到其左子树最右端节点4</li>\n<li>节点4右孩子为空，先输出cur（节点2）的值，再将节点4右孩子指向cur（节点2）,并更新cur（节点2）为其左孩子节点4。</li>\n<li>这个时候cur（节点4）的左孩子为空，所以访问其右孩子，发现右孩子指向了节点2，所以我们将cur更新为节点2。</li>\n<li>这个时候我们发现cur又指向了节点2，所以左孩子节点4不为空，我们再次找到左子树中最右端节点4，但是这个时候节点4的右孩子指向了cur，所以我们将其删除，即节点4右孩子指向为空，恢复原来的树结构。并且由于已经访问了左孩子和根节点，所以这个时候我们访问其右孩子节点5。</li>\n<li>……  <h2 id=\"代码实现\"><a href=\"#代码实现\" class=\"headerlink\" title=\"代码实现\"></a>代码实现</h2><h3 id=\"前序\"><a href=\"#前序\" class=\"headerlink\" title=\"前序\"></a>前序</h3><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs cpp\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">MorrisPreOrderTraverse</span><span class=\"hljs-params\">(Node *root)</span></span><br><span class=\"hljs-function\"></span>&#123;<br>\t<span class=\"hljs-keyword\">if</span> (root == <span class=\"hljs-literal\">NULL</span>)<br>\t&#123;<br>\t\t<span class=\"hljs-keyword\">return</span>;<br>\t&#125;<br> <br>\tNode *cur = root;<br>\tNode *pre = <span class=\"hljs-literal\">NULL</span>;<br> <br>\t<span class=\"hljs-keyword\">while</span> (cur != <span class=\"hljs-literal\">NULL</span>)<br>\t&#123;<br>\t\tpre = cur-&gt;left;<br>\t\t<span class=\"hljs-keyword\">if</span> (pre != <span class=\"hljs-literal\">NULL</span>)<br>\t\t&#123;<br>\t\t\t<span class=\"hljs-keyword\">while</span>(pre-&gt;right != <span class=\"hljs-literal\">NULL</span> &amp;&amp; pre-&gt;right != cur)<br>\t\t\t&#123;<br>\t\t\t\tpre = pre-&gt;right;<br>\t\t\t&#125;<br>\t\t\t<span class=\"hljs-keyword\">if</span> (pre-&gt;right == <span class=\"hljs-literal\">NULL</span>)<br>\t\t\t&#123;<br>\t\t\t\tpre-&gt;right = cur;\t\t<span class=\"hljs-comment\">// 空闲指针</span><br>\t\t\t\tcout&lt;&lt;cur-&gt;val&lt;&lt;<span class=\"hljs-string\">&quot; &quot;</span>;\t<span class=\"hljs-comment\">// 打印结点值的顺序稍微调整</span><br>\t\t\t\tcur = cur-&gt;left;<br>\t\t\t\t<span class=\"hljs-keyword\">continue</span>;<br>\t\t\t&#125;<br>\t\t\t<span class=\"hljs-keyword\">else</span><br>\t\t\t&#123;<br>\t\t\t\tpre-&gt;right = <span class=\"hljs-literal\">NULL</span>;<br>\t\t\t&#125;<br>\t\t&#125;<br>\t\t<span class=\"hljs-keyword\">else</span><br>\t\t&#123;<br>\t\t\tcout&lt;&lt;cur-&gt;val&lt;&lt;<span class=\"hljs-string\">&quot; &quot;</span>;<br>\t\t&#125;<br>\t\tcur = cur-&gt;right;<br>\t&#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n<h3 id=\"中序\"><a href=\"#中序\" class=\"headerlink\" title=\"中序\"></a>中序</h3><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs cpp\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">MorrisInOrderTraverse</span><span class=\"hljs-params\">(Node *root)</span></span><br><span class=\"hljs-function\"></span>&#123;<br>\t<span class=\"hljs-keyword\">if</span> (root == <span class=\"hljs-literal\">NULL</span>)<br>\t&#123;<br>\t\t<span class=\"hljs-keyword\">return</span>;<br>\t&#125;<br> <br>\tNode *cur = root;<br>\tNode *pre = <span class=\"hljs-literal\">NULL</span>;<br> <br>\t<span class=\"hljs-keyword\">while</span> (cur != <span class=\"hljs-literal\">NULL</span>)<br>\t&#123;<br>\t\tpre = cur-&gt;left;<br>\t\t<span class=\"hljs-keyword\">if</span> (pre != <span class=\"hljs-literal\">NULL</span>)<br>\t\t&#123;<br>\t\t\t<span class=\"hljs-keyword\">while</span>(pre-&gt;right != <span class=\"hljs-literal\">NULL</span> &amp;&amp; pre-&gt;right != cur)<br>\t\t\t&#123;<br>\t\t\t\tpre = pre-&gt;right;<br>\t\t\t&#125;<br>\t\t\t<span class=\"hljs-keyword\">if</span> (pre-&gt;right == <span class=\"hljs-literal\">NULL</span>)<br>\t\t\t&#123;<br>\t\t\t\tpre-&gt;right = cur;\t\t<span class=\"hljs-comment\">// 空闲指针</span><br>\t\t\t\tcur = cur-&gt;left;<br>\t\t\t\t<span class=\"hljs-keyword\">continue</span>;<br>\t\t\t&#125;<br>\t\t\t<span class=\"hljs-keyword\">else</span><br>\t\t\t&#123;<br>\t\t\t\tpre-&gt;right = <span class=\"hljs-literal\">NULL</span>;<br>\t\t\t&#125;<br>\t\t&#125;<br>\t\tcout&lt;&lt;cur-&gt;val&lt;&lt;<span class=\"hljs-string\">&quot; &quot;</span>;<br>\t\tcur = cur-&gt;right;<br>\t&#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n<h3 id=\"后序\"><a href=\"#后序\" class=\"headerlink\" title=\"后序\"></a>后序</h3><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs cpp\"><span class=\"hljs-function\">Node* <span class=\"hljs-title\">reverseEdge</span><span class=\"hljs-params\">(Node *root)</span></span><br><span class=\"hljs-function\"></span>&#123;<br>\tNode *pre = <span class=\"hljs-literal\">NULL</span>;<br>\tNode *next = <span class=\"hljs-literal\">NULL</span>;<br> <br>\t<span class=\"hljs-keyword\">while</span>(root != <span class=\"hljs-literal\">NULL</span>)<br>\t&#123;<br>\t\tnext = root-&gt;right;<br>\t\troot-&gt;right = pre;<br>\t\tpre = root;<br>\t\troot = next;<br>\t&#125;<br> <br>\t<span class=\"hljs-keyword\">return</span> pre;<br>&#125;<br> <br><span class=\"hljs-comment\">// 逆序打印左子树右边界</span><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">printEdge</span><span class=\"hljs-params\">(Node *root)</span></span><br><span class=\"hljs-function\"></span>&#123;<br>\tNode *lastNode = <span class=\"hljs-built_in\">reverseEdge</span>(root);<br>\tNode *cur = lastNode;<br> <br>\t<span class=\"hljs-keyword\">while</span> (cur != <span class=\"hljs-literal\">NULL</span>)<br>\t&#123;<br>\t\tcout&lt;&lt;cur-&gt;val&lt;&lt;<span class=\"hljs-string\">&quot; &quot;</span>;<br>\t\tcur = cur-&gt;right;<br>\t&#125;<br>\t<span class=\"hljs-built_in\">reverseEdge</span>(lastNode);<br>&#125;<br> <br><span class=\"hljs-comment\">// Morris后序遍历 (左 -&gt; 右 -&gt; 根)</span><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">MorrisPostOrderTraverse</span><span class=\"hljs-params\">(Node *root)</span></span><br><span class=\"hljs-function\"></span>&#123;<br>\t<span class=\"hljs-keyword\">if</span> (root == <span class=\"hljs-literal\">NULL</span>)<br>\t&#123;<br>\t\t<span class=\"hljs-keyword\">return</span>;<br>\t&#125;<br> <br>\tNode *cur = root;<br>\tNode *pre = <span class=\"hljs-literal\">NULL</span>;<br> <br>\t<span class=\"hljs-keyword\">while</span> (cur != <span class=\"hljs-literal\">NULL</span>)<br>\t&#123;<br>\t\tpre = cur-&gt;left;<br>\t\t<span class=\"hljs-keyword\">if</span> (pre != <span class=\"hljs-literal\">NULL</span>)<br>\t\t&#123;<br>\t\t\t<span class=\"hljs-keyword\">while</span>(pre-&gt;right != <span class=\"hljs-literal\">NULL</span> &amp;&amp; pre-&gt;right != cur)<br>\t\t\t&#123;<br>\t\t\t\tpre = pre-&gt;right;<br>\t\t\t&#125;<br>\t\t\t<span class=\"hljs-keyword\">if</span> (pre-&gt;right == <span class=\"hljs-literal\">NULL</span>)<br>\t\t\t&#123;<br>\t\t\t\tpre-&gt;right = cur;\t\t<span class=\"hljs-comment\">// 空闲指针</span><br>\t\t\t\tcur = cur-&gt;left;<br>\t\t\t\t<span class=\"hljs-keyword\">continue</span>;<br>\t\t\t&#125;<br>\t\t\t<span class=\"hljs-keyword\">else</span><br>\t\t\t&#123;<br>\t\t\t\tpre-&gt;right = <span class=\"hljs-literal\">NULL</span>;<br>\t\t\t\t<span class=\"hljs-built_in\">printEdge</span>(cur-&gt;left);<br>\t\t\t&#125;<br>\t\t&#125;<br>\t\tcur = cur-&gt;right;<br>\t&#125;<br>\t<span class=\"hljs-built_in\">printEdge</span>(root);<br>&#125;<br></code></pre></td></tr></table></figure>\n</li>\n</ul>\n<h2 id=\"参考资料\"><a href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"></a>参考资料</h2><blockquote>\n<p>感谢以下博客，为本文提供了资料<br>1.<a href=\"https://leetcode-cn.com/problems/find-mode-in-binary-search-tree/solution/xiang-jie-cshi-xian-morriszhong-xu-bian-li-jie-fa-/\">遍历的c++实现</a>   </p>\n<ol>\n<li><a href=\"https://blog.csdn.net/danmo_wuhen/article/details/104339630\">图源侵删</a>  </li>\n</ol>\n<p>感谢以下博客，帮助我更好的理解。<br>1.<a href=\"https://zhuanlan.zhihu.com/p/101321696\">神级遍历——morris</a><br>2.<a href=\"https://blog.csdn.net/weixin_42638946/article/details/118788173\">Morris遍历</a></p>\n</blockquote>\n","site":{"data":{}},"excerpt":"<h1 id=\"Morris遍历，-O-1-空间遍历二叉树\"><a href=\"#Morris遍历，-O-1-空间遍历二叉树\" class=\"headerlink\" title=\"Morris遍历， $O(1)$ 空间遍历二叉树\"></a>Morris遍历， $O(1)$ 空间遍历二叉树</h1><p>在我们的学习过程中，二叉树的前、中、后序遍历相信大家并不陌生了：dfs一下就行了。<br>但，在最坏情况下,整颗二叉数都会被存入栈空间中。<br>为了解决这种问题，我们便引入了一种新的遍历方式：Morris遍历  </p>\n<blockquote>\n<p>注意，这只是一种实现前、中、后序遍历的方式，并不是一种新的遍历规则   </p>\n</blockquote>","more":"<h2 id=\"原理讲解：\"><a href=\"#原理讲解：\" class=\"headerlink\" title=\"原理讲解：\"></a>原理讲解：</h2><p>在整个过程中，我们需要维护<strong>当前节点的位置cur</strong>与cur的<strong>左子树中最右端的节点pre</strong>，并利用一些节点的右儿子的<strong>空余的指针</strong>，使得我们能够建立一种机制，对于没有左子树的节点只到达一次，对于有左子树的节点会到达两次来保证 $O(1)$ 的空间复杂度的。下面我们通过伪代码来讲解这一过程<br><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs cpp\">cur = root;<span class=\"hljs-comment\">//cur初始化为根结点</span><br><span class=\"hljs-keyword\">while</span>(cur!=null)<br>&#123;<br>    <span class=\"hljs-keyword\">if</span>(cur.left==null) cur=cur.right;<span class=\"hljs-comment\">//如果左子树为空，将当前节点更新为右子树根结点</span><br>    <span class=\"hljs-keyword\">else</span><br>    &#123;<br>        pre = <span class=\"hljs-built_in\">getPre</span>(cur.left);<span class=\"hljs-comment\">//找到cur左子树中最右边的节点  </span><br>        <span class=\"hljs-keyword\">if</span>(pre.right==null)<br>            pre.right = cur;<br>            <span class=\"hljs-comment\">//注意，这里是Morris遍历的核心部分，它利用了空余的资源，将“存放根结点”的任务无需额外空间便完成了</span><br>        <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span>(pre.right==cur)<br>            pre.right = null;<br>            <span class=\"hljs-comment\">//还原树结构（回溯）</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></p>\n<p>我们可以发现，这个算法的核心就是利用<strong>空闲的叶子节点的右指针</strong>来减少空间复杂度的<br>下面我们通过一张图来解释一下这个过程：<br><img src=\"20200216151818405.png\" alt=\"简单的二叉树\"></p>\n<ul>\n<li>将根节点1设置为cur。</li>\n<li>因为cur（节点1）不为空，且cur（节点1）的左孩子节点2不为空，所以我们找到以节点2为根节点的左子树中最右端的节点5。</li>\n<li>节点5右孩子为空，此时我们输出cur（节点1）的值，然后将节点5右孩子指向为cur，即节点1。更新cur节点为cur左孩子，即节点2。</li>\n<li>因为cur（节点2）左孩子不为空，找到其左子树最右端节点4</li>\n<li>节点4右孩子为空，先输出cur（节点2）的值，再将节点4右孩子指向cur（节点2）,并更新cur（节点2）为其左孩子节点4。</li>\n<li>这个时候cur（节点4）的左孩子为空，所以访问其右孩子，发现右孩子指向了节点2，所以我们将cur更新为节点2。</li>\n<li>这个时候我们发现cur又指向了节点2，所以左孩子节点4不为空，我们再次找到左子树中最右端节点4，但是这个时候节点4的右孩子指向了cur，所以我们将其删除，即节点4右孩子指向为空，恢复原来的树结构。并且由于已经访问了左孩子和根节点，所以这个时候我们访问其右孩子节点5。</li>\n<li>……  <h2 id=\"代码实现\"><a href=\"#代码实现\" class=\"headerlink\" title=\"代码实现\"></a>代码实现</h2><h3 id=\"前序\"><a href=\"#前序\" class=\"headerlink\" title=\"前序\"></a>前序</h3><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs cpp\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">MorrisPreOrderTraverse</span><span class=\"hljs-params\">(Node *root)</span></span><br><span class=\"hljs-function\"></span>&#123;<br>\t<span class=\"hljs-keyword\">if</span> (root == <span class=\"hljs-literal\">NULL</span>)<br>\t&#123;<br>\t\t<span class=\"hljs-keyword\">return</span>;<br>\t&#125;<br> <br>\tNode *cur = root;<br>\tNode *pre = <span class=\"hljs-literal\">NULL</span>;<br> <br>\t<span class=\"hljs-keyword\">while</span> (cur != <span class=\"hljs-literal\">NULL</span>)<br>\t&#123;<br>\t\tpre = cur-&gt;left;<br>\t\t<span class=\"hljs-keyword\">if</span> (pre != <span class=\"hljs-literal\">NULL</span>)<br>\t\t&#123;<br>\t\t\t<span class=\"hljs-keyword\">while</span>(pre-&gt;right != <span class=\"hljs-literal\">NULL</span> &amp;&amp; pre-&gt;right != cur)<br>\t\t\t&#123;<br>\t\t\t\tpre = pre-&gt;right;<br>\t\t\t&#125;<br>\t\t\t<span class=\"hljs-keyword\">if</span> (pre-&gt;right == <span class=\"hljs-literal\">NULL</span>)<br>\t\t\t&#123;<br>\t\t\t\tpre-&gt;right = cur;\t\t<span class=\"hljs-comment\">// 空闲指针</span><br>\t\t\t\tcout&lt;&lt;cur-&gt;val&lt;&lt;<span class=\"hljs-string\">&quot; &quot;</span>;\t<span class=\"hljs-comment\">// 打印结点值的顺序稍微调整</span><br>\t\t\t\tcur = cur-&gt;left;<br>\t\t\t\t<span class=\"hljs-keyword\">continue</span>;<br>\t\t\t&#125;<br>\t\t\t<span class=\"hljs-keyword\">else</span><br>\t\t\t&#123;<br>\t\t\t\tpre-&gt;right = <span class=\"hljs-literal\">NULL</span>;<br>\t\t\t&#125;<br>\t\t&#125;<br>\t\t<span class=\"hljs-keyword\">else</span><br>\t\t&#123;<br>\t\t\tcout&lt;&lt;cur-&gt;val&lt;&lt;<span class=\"hljs-string\">&quot; &quot;</span>;<br>\t\t&#125;<br>\t\tcur = cur-&gt;right;<br>\t&#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n<h3 id=\"中序\"><a href=\"#中序\" class=\"headerlink\" title=\"中序\"></a>中序</h3><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs cpp\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">MorrisInOrderTraverse</span><span class=\"hljs-params\">(Node *root)</span></span><br><span class=\"hljs-function\"></span>&#123;<br>\t<span class=\"hljs-keyword\">if</span> (root == <span class=\"hljs-literal\">NULL</span>)<br>\t&#123;<br>\t\t<span class=\"hljs-keyword\">return</span>;<br>\t&#125;<br> <br>\tNode *cur = root;<br>\tNode *pre = <span class=\"hljs-literal\">NULL</span>;<br> <br>\t<span class=\"hljs-keyword\">while</span> (cur != <span class=\"hljs-literal\">NULL</span>)<br>\t&#123;<br>\t\tpre = cur-&gt;left;<br>\t\t<span class=\"hljs-keyword\">if</span> (pre != <span class=\"hljs-literal\">NULL</span>)<br>\t\t&#123;<br>\t\t\t<span class=\"hljs-keyword\">while</span>(pre-&gt;right != <span class=\"hljs-literal\">NULL</span> &amp;&amp; pre-&gt;right != cur)<br>\t\t\t&#123;<br>\t\t\t\tpre = pre-&gt;right;<br>\t\t\t&#125;<br>\t\t\t<span class=\"hljs-keyword\">if</span> (pre-&gt;right == <span class=\"hljs-literal\">NULL</span>)<br>\t\t\t&#123;<br>\t\t\t\tpre-&gt;right = cur;\t\t<span class=\"hljs-comment\">// 空闲指针</span><br>\t\t\t\tcur = cur-&gt;left;<br>\t\t\t\t<span class=\"hljs-keyword\">continue</span>;<br>\t\t\t&#125;<br>\t\t\t<span class=\"hljs-keyword\">else</span><br>\t\t\t&#123;<br>\t\t\t\tpre-&gt;right = <span class=\"hljs-literal\">NULL</span>;<br>\t\t\t&#125;<br>\t\t&#125;<br>\t\tcout&lt;&lt;cur-&gt;val&lt;&lt;<span class=\"hljs-string\">&quot; &quot;</span>;<br>\t\tcur = cur-&gt;right;<br>\t&#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n<h3 id=\"后序\"><a href=\"#后序\" class=\"headerlink\" title=\"后序\"></a>后序</h3><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs cpp\"><span class=\"hljs-function\">Node* <span class=\"hljs-title\">reverseEdge</span><span class=\"hljs-params\">(Node *root)</span></span><br><span class=\"hljs-function\"></span>&#123;<br>\tNode *pre = <span class=\"hljs-literal\">NULL</span>;<br>\tNode *next = <span class=\"hljs-literal\">NULL</span>;<br> <br>\t<span class=\"hljs-keyword\">while</span>(root != <span class=\"hljs-literal\">NULL</span>)<br>\t&#123;<br>\t\tnext = root-&gt;right;<br>\t\troot-&gt;right = pre;<br>\t\tpre = root;<br>\t\troot = next;<br>\t&#125;<br> <br>\t<span class=\"hljs-keyword\">return</span> pre;<br>&#125;<br> <br><span class=\"hljs-comment\">// 逆序打印左子树右边界</span><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">printEdge</span><span class=\"hljs-params\">(Node *root)</span></span><br><span class=\"hljs-function\"></span>&#123;<br>\tNode *lastNode = <span class=\"hljs-built_in\">reverseEdge</span>(root);<br>\tNode *cur = lastNode;<br> <br>\t<span class=\"hljs-keyword\">while</span> (cur != <span class=\"hljs-literal\">NULL</span>)<br>\t&#123;<br>\t\tcout&lt;&lt;cur-&gt;val&lt;&lt;<span class=\"hljs-string\">&quot; &quot;</span>;<br>\t\tcur = cur-&gt;right;<br>\t&#125;<br>\t<span class=\"hljs-built_in\">reverseEdge</span>(lastNode);<br>&#125;<br> <br><span class=\"hljs-comment\">// Morris后序遍历 (左 -&gt; 右 -&gt; 根)</span><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">MorrisPostOrderTraverse</span><span class=\"hljs-params\">(Node *root)</span></span><br><span class=\"hljs-function\"></span>&#123;<br>\t<span class=\"hljs-keyword\">if</span> (root == <span class=\"hljs-literal\">NULL</span>)<br>\t&#123;<br>\t\t<span class=\"hljs-keyword\">return</span>;<br>\t&#125;<br> <br>\tNode *cur = root;<br>\tNode *pre = <span class=\"hljs-literal\">NULL</span>;<br> <br>\t<span class=\"hljs-keyword\">while</span> (cur != <span class=\"hljs-literal\">NULL</span>)<br>\t&#123;<br>\t\tpre = cur-&gt;left;<br>\t\t<span class=\"hljs-keyword\">if</span> (pre != <span class=\"hljs-literal\">NULL</span>)<br>\t\t&#123;<br>\t\t\t<span class=\"hljs-keyword\">while</span>(pre-&gt;right != <span class=\"hljs-literal\">NULL</span> &amp;&amp; pre-&gt;right != cur)<br>\t\t\t&#123;<br>\t\t\t\tpre = pre-&gt;right;<br>\t\t\t&#125;<br>\t\t\t<span class=\"hljs-keyword\">if</span> (pre-&gt;right == <span class=\"hljs-literal\">NULL</span>)<br>\t\t\t&#123;<br>\t\t\t\tpre-&gt;right = cur;\t\t<span class=\"hljs-comment\">// 空闲指针</span><br>\t\t\t\tcur = cur-&gt;left;<br>\t\t\t\t<span class=\"hljs-keyword\">continue</span>;<br>\t\t\t&#125;<br>\t\t\t<span class=\"hljs-keyword\">else</span><br>\t\t\t&#123;<br>\t\t\t\tpre-&gt;right = <span class=\"hljs-literal\">NULL</span>;<br>\t\t\t\t<span class=\"hljs-built_in\">printEdge</span>(cur-&gt;left);<br>\t\t\t&#125;<br>\t\t&#125;<br>\t\tcur = cur-&gt;right;<br>\t&#125;<br>\t<span class=\"hljs-built_in\">printEdge</span>(root);<br>&#125;<br></code></pre></td></tr></table></figure>\n</li>\n</ul>\n<h2 id=\"参考资料\"><a href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"></a>参考资料</h2><blockquote>\n<p>感谢以下博客，为本文提供了资料<br>1.<a href=\"https://leetcode-cn.com/problems/find-mode-in-binary-search-tree/solution/xiang-jie-cshi-xian-morriszhong-xu-bian-li-jie-fa-/\">遍历的c++实现</a>   </p>\n<ol>\n<li><a href=\"https://blog.csdn.net/danmo_wuhen/article/details/104339630\">图源侵删</a>  </li>\n</ol>\n<p>感谢以下博客，帮助我更好的理解。<br>1.<a href=\"https://zhuanlan.zhihu.com/p/101321696\">神级遍历——morris</a><br>2.<a href=\"https://blog.csdn.net/weixin_42638946/article/details/118788173\">Morris遍历</a></p>\n</blockquote>"},{"title":"斯坦纳树学习笔记","date":"2021-08-07T13:31:21.000Z","_content":"  \n## 引入  \n\n相信大家在日常学习生活中都遇到过这个问题：求三角形的[费马点](https://zhuanlan.zhihu.com/p/136600079)。相信大家对此并不陌生，结论也显而易见。可若将它推广开来，求平面内一点，使其到给定的n个点的距离和最小，那么还有开箱即用的结论吗？这就是我们今天要探讨的问题：斯坦纳树了  \n\n## 推广  \n\n有了三个点的情况，我们自然而然地便会将问题推广至n个点： \n> 形式化描述：  \n> 给定点 $A_1,A_2,\\ldots,A_n$ ,求一点P,使得 $Σ^n_{i=1}PA_i$最小  \n\n这个推广看起来很好，但*库朗（R.Courant）和罗宾斯（H.Robbins）提出第一个定义的推广是肤浅的[^1]*,因此，在OI中，我们要研究的问题就变为了：给定 $n$ 个点 $A_1,A_2,\\ldots,A_n$ ,试求连接这 $n$ 个点的最短线段总和。  \n\n初看是不是特别像最小生成树？但请注意，在斯坦纳网络中，两个关键点之间并不一定要直接相连。如图：  \n![P1](steiner-tree1.png)  \n可以看到，每张图中都会有一些红色的中转点。但在一些情况下，也可能会退化为蓝点。  \n就像费马点一样，大多数时候，我们都需要找中转点。  \n记住这一点，在接下来的代码实现中，我们都要用到找“中转点”的思想。\n\n在图论中，点的位置被进一步确定，因此问题被进一步转化为：给定 $n$ 个节点，其中有 $k$ 个关键点，求一个子图使所有关键点联通且边权最小。\n\n##  例题\n\n知道了这些后，我们便可开始写代码了。解决这类组合最优化问题，我们可以使用dp的思想，记 $f(i,S)$ 为当前子树根为 $i$ 时,字数内关键点联通的最小代价。 \n> 为什么是“树”呢？我们可以反证：若有环，则删去后总权值必定减小，因此一定更优，所以最后形成的图一定是树  \n\n### [P6192 【模板】最小斯坦纳树](https://www.luogu.com.cn/problem/P6192)  \n\n\n\n## 参考  \n[^1]: [OIwiki-斯坦纳树](https://oi-wiki.org/graph/steiner-tree/)\n","source":"_posts/斯坦纳树学习笔记.md","raw":"---\ntitle: 斯坦纳树学习笔记\ndate: 2021-08-07 21:31:21\ntags:\n---\n  \n## 引入  \n\n相信大家在日常学习生活中都遇到过这个问题：求三角形的[费马点](https://zhuanlan.zhihu.com/p/136600079)。相信大家对此并不陌生，结论也显而易见。可若将它推广开来，求平面内一点，使其到给定的n个点的距离和最小，那么还有开箱即用的结论吗？这就是我们今天要探讨的问题：斯坦纳树了  \n\n## 推广  \n\n有了三个点的情况，我们自然而然地便会将问题推广至n个点： \n> 形式化描述：  \n> 给定点 $A_1,A_2,\\ldots,A_n$ ,求一点P,使得 $Σ^n_{i=1}PA_i$最小  \n\n这个推广看起来很好，但*库朗（R.Courant）和罗宾斯（H.Robbins）提出第一个定义的推广是肤浅的[^1]*,因此，在OI中，我们要研究的问题就变为了：给定 $n$ 个点 $A_1,A_2,\\ldots,A_n$ ,试求连接这 $n$ 个点的最短线段总和。  \n\n初看是不是特别像最小生成树？但请注意，在斯坦纳网络中，两个关键点之间并不一定要直接相连。如图：  \n![P1](steiner-tree1.png)  \n可以看到，每张图中都会有一些红色的中转点。但在一些情况下，也可能会退化为蓝点。  \n就像费马点一样，大多数时候，我们都需要找中转点。  \n记住这一点，在接下来的代码实现中，我们都要用到找“中转点”的思想。\n\n在图论中，点的位置被进一步确定，因此问题被进一步转化为：给定 $n$ 个节点，其中有 $k$ 个关键点，求一个子图使所有关键点联通且边权最小。\n\n##  例题\n\n知道了这些后，我们便可开始写代码了。解决这类组合最优化问题，我们可以使用dp的思想，记 $f(i,S)$ 为当前子树根为 $i$ 时,字数内关键点联通的最小代价。 \n> 为什么是“树”呢？我们可以反证：若有环，则删去后总权值必定减小，因此一定更优，所以最后形成的图一定是树  \n\n### [P6192 【模板】最小斯坦纳树](https://www.luogu.com.cn/problem/P6192)  \n\n\n\n## 参考  \n[^1]: [OIwiki-斯坦纳树](https://oi-wiki.org/graph/steiner-tree/)\n","slug":"斯坦纳树学习笔记","published":1,"updated":"2021-08-07T15:12:14.297Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cks1x1mdv0009v4vv8v8x8aeb","content":"<h2 id=\"引入\"><a href=\"#引入\" class=\"headerlink\" title=\"引入\"></a>引入</h2><p>相信大家在日常学习生活中都遇到过这个问题：求三角形的<a href=\"https://zhuanlan.zhihu.com/p/136600079\">费马点</a>。相信大家对此并不陌生，结论也显而易见。可若将它推广开来，求平面内一点，使其到给定的n个点的距离和最小，那么还有开箱即用的结论吗？这就是我们今天要探讨的问题：斯坦纳树了  </p>\n<h2 id=\"推广\"><a href=\"#推广\" class=\"headerlink\" title=\"推广\"></a>推广</h2><p>有了三个点的情况，我们自然而然地便会将问题推广至n个点： </p>\n<blockquote>\n<p>形式化描述：<br>给定点 $A<em>1,A_2,\\ldots,A_n$ ,求一点P,使得 $Σ^n</em>{i=1}PA_i$最小  </p>\n</blockquote>\n<p>这个推广看起来很好，但<em>库朗（R.Courant）和罗宾斯（H.Robbins）提出第一个定义的推广是肤浅的<sup id=\"fnref:1\" class=\"footnote-ref\"><a href=\"#fn:1\" rel=\"footnote\"><span class=\"hint--top hint--rounded\" aria-label=\"OIwiki-斯坦纳树\n\">[1]</span></a></sup></em>,因此，在OI中，我们要研究的问题就变为了：给定 $n$ 个点 $A_1,A_2,\\ldots,A_n$ ,试求连接这 $n$ 个点的最短线段总和。  </p>\n<p>初看是不是特别像最小生成树？但请注意，在斯坦纳网络中，两个关键点之间并不一定要直接相连。如图：<br><img src=\"steiner-tree1.png\" alt=\"P1\"><br>可以看到，每张图中都会有一些红色的中转点。但在一些情况下，也可能会退化为蓝点。<br>就像费马点一样，大多数时候，我们都需要找中转点。<br>记住这一点，在接下来的代码实现中，我们都要用到找“中转点”的思想。</p>\n<p>在图论中，点的位置被进一步确定，因此问题被进一步转化为：给定 $n$ 个节点，其中有 $k$ 个关键点，求一个子图使所有关键点联通且边权最小。</p>\n<h2 id=\"例题\"><a href=\"#例题\" class=\"headerlink\" title=\"例题\"></a>例题</h2><p>知道了这些后，我们便可开始写代码了。解决这类组合最优化问题，我们可以使用dp的思想，记 $f(i,S)$ 为当前子树根为 $i$ 时,字数内关键点联通的最小代价。 </p>\n<blockquote>\n<p>为什么是“树”呢？我们可以反证：若有环，则删去后总权值必定减小，因此一定更优，所以最后形成的图一定是树  </p>\n</blockquote>\n<h3 id=\"P6192-【模板】最小斯坦纳树\"><a href=\"#P6192-【模板】最小斯坦纳树\" class=\"headerlink\" title=\"P6192 【模板】最小斯坦纳树\"></a><a href=\"https://www.luogu.com.cn/problem/P6192\">P6192 【模板】最小斯坦纳树</a></h3><h2 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h2><section class=\"footnotes\"><div class=\"footnote-list\"><ol><li><span id=\"fn:1\" class=\"footnote-text\"><span><a href=\"https://oi-wiki.org/graph/steiner-tree/\">OIwiki-斯坦纳树</a>\n<a href=\"#fnref:1\" rev=\"footnote\" class=\"footnote-backref\"> ↩</a></span></span></li></ol></div></section>","site":{"data":{}},"excerpt":"","more":"<h2 id=\"引入\"><a href=\"#引入\" class=\"headerlink\" title=\"引入\"></a>引入</h2><p>相信大家在日常学习生活中都遇到过这个问题：求三角形的<a href=\"https://zhuanlan.zhihu.com/p/136600079\">费马点</a>。相信大家对此并不陌生，结论也显而易见。可若将它推广开来，求平面内一点，使其到给定的n个点的距离和最小，那么还有开箱即用的结论吗？这就是我们今天要探讨的问题：斯坦纳树了  </p>\n<h2 id=\"推广\"><a href=\"#推广\" class=\"headerlink\" title=\"推广\"></a>推广</h2><p>有了三个点的情况，我们自然而然地便会将问题推广至n个点： </p>\n<blockquote>\n<p>形式化描述：<br>给定点 $A<em>1,A_2,\\ldots,A_n$ ,求一点P,使得 $Σ^n</em>{i=1}PA_i$最小  </p>\n</blockquote>\n<p>这个推广看起来很好，但<em>库朗（R.Courant）和罗宾斯（H.Robbins）提出第一个定义的推广是肤浅的<sup id=\"fnref:1\" class=\"footnote-ref\"><a href=\"#fn:1\" rel=\"footnote\"><span class=\"hint--top hint--rounded\" aria-label=\"OIwiki-斯坦纳树\n\">[1]</span></a></sup></em>,因此，在OI中，我们要研究的问题就变为了：给定 $n$ 个点 $A_1,A_2,\\ldots,A_n$ ,试求连接这 $n$ 个点的最短线段总和。  </p>\n<p>初看是不是特别像最小生成树？但请注意，在斯坦纳网络中，两个关键点之间并不一定要直接相连。如图：<br><img src=\"steiner-tree1.png\" alt=\"P1\"><br>可以看到，每张图中都会有一些红色的中转点。但在一些情况下，也可能会退化为蓝点。<br>就像费马点一样，大多数时候，我们都需要找中转点。<br>记住这一点，在接下来的代码实现中，我们都要用到找“中转点”的思想。</p>\n<p>在图论中，点的位置被进一步确定，因此问题被进一步转化为：给定 $n$ 个节点，其中有 $k$ 个关键点，求一个子图使所有关键点联通且边权最小。</p>\n<h2 id=\"例题\"><a href=\"#例题\" class=\"headerlink\" title=\"例题\"></a>例题</h2><p>知道了这些后，我们便可开始写代码了。解决这类组合最优化问题，我们可以使用dp的思想，记 $f(i,S)$ 为当前子树根为 $i$ 时,字数内关键点联通的最小代价。 </p>\n<blockquote>\n<p>为什么是“树”呢？我们可以反证：若有环，则删去后总权值必定减小，因此一定更优，所以最后形成的图一定是树  </p>\n</blockquote>\n<h3 id=\"P6192-【模板】最小斯坦纳树\"><a href=\"#P6192-【模板】最小斯坦纳树\" class=\"headerlink\" title=\"P6192 【模板】最小斯坦纳树\"></a><a href=\"https://www.luogu.com.cn/problem/P6192\">P6192 【模板】最小斯坦纳树</a></h3><h2 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h2><section class=\"footnotes\"><div class=\"footnote-list\"><ol><li><span id=\"fn:1\" class=\"footnote-text\"><span><a href=\"https://oi-wiki.org/graph/steiner-tree/\">OIwiki-斯坦纳树</a>\n<a href=\"#fnref:1\" rev=\"footnote\" class=\"footnote-backref\"> ↩</a></span></span></li></ol></div></section>"}],"PostAsset":[{"_id":"source/_posts/2021-8-7模拟赛总结/T1.png","post":"cks1x1mdj0001v4vv4pt6dbqs","slug":"T1.png","modified":1,"renderable":1},{"_id":"source/_posts/2021-8-7模拟赛总结/T2.png","post":"cks1x1mdj0001v4vv4pt6dbqs","slug":"T2.png","modified":1,"renderable":1},{"_id":"source/_posts/2021-8-7模拟赛总结/T3.png","post":"cks1x1mdj0001v4vv4pt6dbqs","slug":"T3.png","modified":1,"renderable":1},{"_id":"source/_posts/2021-8-7模拟赛总结/T4.png","post":"cks1x1mdj0001v4vv4pt6dbqs","slug":"T4.png","modified":1,"renderable":1},{"_id":"source/_posts/斯坦纳树学习笔记/steiner-tree1.png","post":"cks1x1mdv0009v4vv8v8x8aeb","slug":"steiner-tree1.png","modified":1,"renderable":1},{"_id":"source/_posts/Morris遍历/20200216151818405.png","post":"cks1x1mdv0008v4vveihy35ob","slug":"20200216151818405.png","modified":1,"renderable":1}],"PostCategory":[{"post_id":"cks1x1mdv0008v4vveihy35ob","category_id":"cks1x1mdx000av4vv66sa5bl8","_id":"cks1x1mdy000dv4vv1j4x0yoz"}],"PostTag":[{"post_id":"cks1x1mdj0001v4vv4pt6dbqs","tag_id":"cks1x1mdp0003v4vv64msf7vp","_id":"cks1x1mdt0006v4vv871o8x5l"},{"post_id":"cks1x1mdr0004v4vv01plcbpk","tag_id":"cks1x1mdt0005v4vv1m0qc0h1","_id":"cks1x1mdt0007v4vvgl3e7lum"},{"post_id":"cks1x1mdv0008v4vveihy35ob","tag_id":"cks1x1mdy000bv4vvdvu75i43","_id":"cks1x1mdy000cv4vv3w1x02uh"}],"Tag":[{"name":"赛后总结","_id":"cks1x1mdp0003v4vv64msf7vp"},{"name":"计划清单","_id":"cks1x1mdt0005v4vv1m0qc0h1"},{"name":"图论","_id":"cks1x1mdy000bv4vvdvu75i43"}]}}